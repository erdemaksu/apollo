// Code generated by protoc-gen-go.
// source: apollo.proto
// DO NOT EDIT!

/*
Package apollo is a generated protocol buffer package.

It is generated from these files:
	apollo.proto

It has these top-level messages:
	ApolloPdu
	AuthExchange
	BatchWrite
	CloseTable
	CreateTable
	Delete
	DeleteTable
	Error
	OpenTable
	Read
	ReadRange
	ReadRangeN
	Response
	TableInfo
	Update
	Write
	First
	Last
	Seek
	Next
	Prev
	AddIndex
	RemoveIndex
	IndexRead
	Continuation
	Field
	FieldNames
	Fields
	KeyColumnsPair
	KeyColumnsList
	KcpIt
	TableOption
	Tda
	UpdateInstruction
	UpdateOperation
	Value
	Version
	Wrapper
*/
package apollo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Comparator int32

const (
	Comparator_DESCENDING Comparator = 0
	Comparator_ASCENDING  Comparator = 1
)

var Comparator_name = map[int32]string{
	0: "DESCENDING",
	1: "ASCENDING",
}
var Comparator_value = map[string]int32{
	"DESCENDING": 0,
	"ASCENDING":  1,
}

func (x Comparator) String() string {
	return proto.EnumName(Comparator_name, int32(x))
}
func (Comparator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DataModel int32

const (
	DataModel_KV    DataModel = 0
	DataModel_ARRAY DataModel = 1
	DataModel_MAP   DataModel = 2
)

var DataModel_name = map[int32]string{
	0: "KV",
	1: "ARRAY",
	2: "MAP",
}
var DataModel_value = map[string]int32{
	"KV":    0,
	"ARRAY": 1,
	"MAP":   2,
}

func (x DataModel) String() string {
	return proto.EnumName(DataModel_name, int32(x))
}
func (DataModel) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type HashingMethod int32

const (
	HashingMethod_VIRTUALNODES HashingMethod = 0
	HashingMethod_CONSISTENT   HashingMethod = 1
	HashingMethod_UNIFORM      HashingMethod = 2
	HashingMethod_RENDEZVOUS   HashingMethod = 3
)

var HashingMethod_name = map[int32]string{
	0: "VIRTUALNODES",
	1: "CONSISTENT",
	2: "UNIFORM",
	3: "RENDEZVOUS",
}
var HashingMethod_value = map[string]int32{
	"VIRTUALNODES": 0,
	"CONSISTENT":   1,
	"UNIFORM":      2,
	"RENDEZVOUS":   3,
}

func (x HashingMethod) String() string {
	return proto.EnumName(HashingMethod_name, int32(x))
}
func (HashingMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type TimeUnit int32

const (
	TimeUnit_SECOND      TimeUnit = 0
	TimeUnit_MILLISECOND TimeUnit = 1
	TimeUnit_MICROSECOND TimeUnit = 2
	TimeUnit_NANOSECOND  TimeUnit = 3
)

var TimeUnit_name = map[int32]string{
	0: "SECOND",
	1: "MILLISECOND",
	2: "MICROSECOND",
	3: "NANOSECOND",
}
var TimeUnit_value = map[string]int32{
	"SECOND":      0,
	"MILLISECOND": 1,
	"MICROSECOND": 2,
	"NANOSECOND":  3,
}

func (x TimeUnit) String() string {
	return proto.EnumName(TimeUnit_name, int32(x))
}
func (TimeUnit) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Type int32

const (
	Type_LEVELDB           Type = 0
	Type_MEMLEVELDB        Type = 1
	Type_LEVELDBWRAPPED    Type = 2
	Type_MEMLEVELDBWRAPPED Type = 3
	Type_LEVELDBTDA        Type = 4
	Type_MEMLEVELDBTDA     Type = 5
)

var Type_name = map[int32]string{
	0: "LEVELDB",
	1: "MEMLEVELDB",
	2: "LEVELDBWRAPPED",
	3: "MEMLEVELDBWRAPPED",
	4: "LEVELDBTDA",
	5: "MEMLEVELDBTDA",
}
var Type_value = map[string]int32{
	"LEVELDB":           0,
	"MEMLEVELDB":        1,
	"LEVELDBWRAPPED":    2,
	"MEMLEVELDBWRAPPED": 3,
	"LEVELDBTDA":        4,
	"MEMLEVELDBTDA":     5,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type UpdateInstruction_Instruction int32

const (
	UpdateInstruction_INCREMENT UpdateInstruction_Instruction = 0
	UpdateInstruction_OVERWRITE UpdateInstruction_Instruction = 7
)

var UpdateInstruction_Instruction_name = map[int32]string{
	0: "INCREMENT",
	7: "OVERWRITE",
}
var UpdateInstruction_Instruction_value = map[string]int32{
	"INCREMENT": 0,
	"OVERWRITE": 7,
}

func (x UpdateInstruction_Instruction) String() string {
	return proto.EnumName(UpdateInstruction_Instruction_name, int32(x))
}
func (UpdateInstruction_Instruction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{33, 0}
}

type ApolloPdu struct {
	Version       *Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	TransactionId uint32   `protobuf:"varint,2,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	// Types that are valid to be assigned to Procedure:
	//	*ApolloPdu_Error
	//	*ApolloPdu_Response
	//	*ApolloPdu_CreateTable
	//	*ApolloPdu_DeleteTable
	//	*ApolloPdu_OpenTable
	//	*ApolloPdu_CloseTable
	//	*ApolloPdu_TableInfo
	//	*ApolloPdu_Read
	//	*ApolloPdu_Write
	//	*ApolloPdu_Update
	//	*ApolloPdu_Delete
	//	*ApolloPdu_ReadRange
	//	*ApolloPdu_ReadRangeN
	//	*ApolloPdu_BatchWrite
	//	*ApolloPdu_First
	//	*ApolloPdu_Last
	//	*ApolloPdu_Seek
	//	*ApolloPdu_Next
	//	*ApolloPdu_Prev
	//	*ApolloPdu_AddIndex
	//	*ApolloPdu_RemoveIndex
	//	*ApolloPdu_IndexRead
	Procedure isApolloPdu_Procedure `protobuf_oneof:"procedure"`
}

func (m *ApolloPdu) Reset()                    { *m = ApolloPdu{} }
func (m *ApolloPdu) String() string            { return proto.CompactTextString(m) }
func (*ApolloPdu) ProtoMessage()               {}
func (*ApolloPdu) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isApolloPdu_Procedure interface {
	isApolloPdu_Procedure()
}

type ApolloPdu_Error struct {
	Error *Error `protobuf:"bytes,3,opt,name=error,oneof"`
}
type ApolloPdu_Response struct {
	Response *Response `protobuf:"bytes,4,opt,name=response,oneof"`
}
type ApolloPdu_CreateTable struct {
	CreateTable *CreateTable `protobuf:"bytes,5,opt,name=create_table,json=createTable,oneof"`
}
type ApolloPdu_DeleteTable struct {
	DeleteTable *DeleteTable `protobuf:"bytes,6,opt,name=delete_table,json=deleteTable,oneof"`
}
type ApolloPdu_OpenTable struct {
	OpenTable *OpenTable `protobuf:"bytes,7,opt,name=open_table,json=openTable,oneof"`
}
type ApolloPdu_CloseTable struct {
	CloseTable *CloseTable `protobuf:"bytes,8,opt,name=close_table,json=closeTable,oneof"`
}
type ApolloPdu_TableInfo struct {
	TableInfo *TableInfo `protobuf:"bytes,9,opt,name=table_info,json=tableInfo,oneof"`
}
type ApolloPdu_Read struct {
	Read *Read `protobuf:"bytes,10,opt,name=read,oneof"`
}
type ApolloPdu_Write struct {
	Write *Write `protobuf:"bytes,11,opt,name=write,oneof"`
}
type ApolloPdu_Update struct {
	Update *Update `protobuf:"bytes,12,opt,name=update,oneof"`
}
type ApolloPdu_Delete struct {
	Delete *Delete `protobuf:"bytes,13,opt,name=delete,oneof"`
}
type ApolloPdu_ReadRange struct {
	ReadRange *ReadRange `protobuf:"bytes,14,opt,name=read_range,json=readRange,oneof"`
}
type ApolloPdu_ReadRangeN struct {
	ReadRangeN *ReadRangeN `protobuf:"bytes,15,opt,name=read_range_n,json=readRangeN,oneof"`
}
type ApolloPdu_BatchWrite struct {
	BatchWrite *BatchWrite `protobuf:"bytes,16,opt,name=batch_write,json=batchWrite,oneof"`
}
type ApolloPdu_First struct {
	First *First `protobuf:"bytes,17,opt,name=first,oneof"`
}
type ApolloPdu_Last struct {
	Last *Last `protobuf:"bytes,18,opt,name=last,oneof"`
}
type ApolloPdu_Seek struct {
	Seek *Seek `protobuf:"bytes,19,opt,name=seek,oneof"`
}
type ApolloPdu_Next struct {
	Next *Next `protobuf:"bytes,20,opt,name=next,oneof"`
}
type ApolloPdu_Prev struct {
	Prev *Prev `protobuf:"bytes,21,opt,name=prev,oneof"`
}
type ApolloPdu_AddIndex struct {
	AddIndex *AddIndex `protobuf:"bytes,22,opt,name=add_index,json=addIndex,oneof"`
}
type ApolloPdu_RemoveIndex struct {
	RemoveIndex *RemoveIndex `protobuf:"bytes,23,opt,name=remove_index,json=removeIndex,oneof"`
}
type ApolloPdu_IndexRead struct {
	IndexRead *IndexRead `protobuf:"bytes,24,opt,name=index_read,json=indexRead,oneof"`
}

func (*ApolloPdu_Error) isApolloPdu_Procedure()       {}
func (*ApolloPdu_Response) isApolloPdu_Procedure()    {}
func (*ApolloPdu_CreateTable) isApolloPdu_Procedure() {}
func (*ApolloPdu_DeleteTable) isApolloPdu_Procedure() {}
func (*ApolloPdu_OpenTable) isApolloPdu_Procedure()   {}
func (*ApolloPdu_CloseTable) isApolloPdu_Procedure()  {}
func (*ApolloPdu_TableInfo) isApolloPdu_Procedure()   {}
func (*ApolloPdu_Read) isApolloPdu_Procedure()        {}
func (*ApolloPdu_Write) isApolloPdu_Procedure()       {}
func (*ApolloPdu_Update) isApolloPdu_Procedure()      {}
func (*ApolloPdu_Delete) isApolloPdu_Procedure()      {}
func (*ApolloPdu_ReadRange) isApolloPdu_Procedure()   {}
func (*ApolloPdu_ReadRangeN) isApolloPdu_Procedure()  {}
func (*ApolloPdu_BatchWrite) isApolloPdu_Procedure()  {}
func (*ApolloPdu_First) isApolloPdu_Procedure()       {}
func (*ApolloPdu_Last) isApolloPdu_Procedure()        {}
func (*ApolloPdu_Seek) isApolloPdu_Procedure()        {}
func (*ApolloPdu_Next) isApolloPdu_Procedure()        {}
func (*ApolloPdu_Prev) isApolloPdu_Procedure()        {}
func (*ApolloPdu_AddIndex) isApolloPdu_Procedure()    {}
func (*ApolloPdu_RemoveIndex) isApolloPdu_Procedure() {}
func (*ApolloPdu_IndexRead) isApolloPdu_Procedure()   {}

func (m *ApolloPdu) GetProcedure() isApolloPdu_Procedure {
	if m != nil {
		return m.Procedure
	}
	return nil
}

func (m *ApolloPdu) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *ApolloPdu) GetError() *Error {
	if x, ok := m.GetProcedure().(*ApolloPdu_Error); ok {
		return x.Error
	}
	return nil
}

func (m *ApolloPdu) GetResponse() *Response {
	if x, ok := m.GetProcedure().(*ApolloPdu_Response); ok {
		return x.Response
	}
	return nil
}

func (m *ApolloPdu) GetCreateTable() *CreateTable {
	if x, ok := m.GetProcedure().(*ApolloPdu_CreateTable); ok {
		return x.CreateTable
	}
	return nil
}

func (m *ApolloPdu) GetDeleteTable() *DeleteTable {
	if x, ok := m.GetProcedure().(*ApolloPdu_DeleteTable); ok {
		return x.DeleteTable
	}
	return nil
}

func (m *ApolloPdu) GetOpenTable() *OpenTable {
	if x, ok := m.GetProcedure().(*ApolloPdu_OpenTable); ok {
		return x.OpenTable
	}
	return nil
}

func (m *ApolloPdu) GetCloseTable() *CloseTable {
	if x, ok := m.GetProcedure().(*ApolloPdu_CloseTable); ok {
		return x.CloseTable
	}
	return nil
}

func (m *ApolloPdu) GetTableInfo() *TableInfo {
	if x, ok := m.GetProcedure().(*ApolloPdu_TableInfo); ok {
		return x.TableInfo
	}
	return nil
}

func (m *ApolloPdu) GetRead() *Read {
	if x, ok := m.GetProcedure().(*ApolloPdu_Read); ok {
		return x.Read
	}
	return nil
}

func (m *ApolloPdu) GetWrite() *Write {
	if x, ok := m.GetProcedure().(*ApolloPdu_Write); ok {
		return x.Write
	}
	return nil
}

func (m *ApolloPdu) GetUpdate() *Update {
	if x, ok := m.GetProcedure().(*ApolloPdu_Update); ok {
		return x.Update
	}
	return nil
}

func (m *ApolloPdu) GetDelete() *Delete {
	if x, ok := m.GetProcedure().(*ApolloPdu_Delete); ok {
		return x.Delete
	}
	return nil
}

func (m *ApolloPdu) GetReadRange() *ReadRange {
	if x, ok := m.GetProcedure().(*ApolloPdu_ReadRange); ok {
		return x.ReadRange
	}
	return nil
}

func (m *ApolloPdu) GetReadRangeN() *ReadRangeN {
	if x, ok := m.GetProcedure().(*ApolloPdu_ReadRangeN); ok {
		return x.ReadRangeN
	}
	return nil
}

func (m *ApolloPdu) GetBatchWrite() *BatchWrite {
	if x, ok := m.GetProcedure().(*ApolloPdu_BatchWrite); ok {
		return x.BatchWrite
	}
	return nil
}

func (m *ApolloPdu) GetFirst() *First {
	if x, ok := m.GetProcedure().(*ApolloPdu_First); ok {
		return x.First
	}
	return nil
}

func (m *ApolloPdu) GetLast() *Last {
	if x, ok := m.GetProcedure().(*ApolloPdu_Last); ok {
		return x.Last
	}
	return nil
}

func (m *ApolloPdu) GetSeek() *Seek {
	if x, ok := m.GetProcedure().(*ApolloPdu_Seek); ok {
		return x.Seek
	}
	return nil
}

func (m *ApolloPdu) GetNext() *Next {
	if x, ok := m.GetProcedure().(*ApolloPdu_Next); ok {
		return x.Next
	}
	return nil
}

func (m *ApolloPdu) GetPrev() *Prev {
	if x, ok := m.GetProcedure().(*ApolloPdu_Prev); ok {
		return x.Prev
	}
	return nil
}

func (m *ApolloPdu) GetAddIndex() *AddIndex {
	if x, ok := m.GetProcedure().(*ApolloPdu_AddIndex); ok {
		return x.AddIndex
	}
	return nil
}

func (m *ApolloPdu) GetRemoveIndex() *RemoveIndex {
	if x, ok := m.GetProcedure().(*ApolloPdu_RemoveIndex); ok {
		return x.RemoveIndex
	}
	return nil
}

func (m *ApolloPdu) GetIndexRead() *IndexRead {
	if x, ok := m.GetProcedure().(*ApolloPdu_IndexRead); ok {
		return x.IndexRead
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ApolloPdu) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ApolloPdu_OneofMarshaler, _ApolloPdu_OneofUnmarshaler, _ApolloPdu_OneofSizer, []interface{}{
		(*ApolloPdu_Error)(nil),
		(*ApolloPdu_Response)(nil),
		(*ApolloPdu_CreateTable)(nil),
		(*ApolloPdu_DeleteTable)(nil),
		(*ApolloPdu_OpenTable)(nil),
		(*ApolloPdu_CloseTable)(nil),
		(*ApolloPdu_TableInfo)(nil),
		(*ApolloPdu_Read)(nil),
		(*ApolloPdu_Write)(nil),
		(*ApolloPdu_Update)(nil),
		(*ApolloPdu_Delete)(nil),
		(*ApolloPdu_ReadRange)(nil),
		(*ApolloPdu_ReadRangeN)(nil),
		(*ApolloPdu_BatchWrite)(nil),
		(*ApolloPdu_First)(nil),
		(*ApolloPdu_Last)(nil),
		(*ApolloPdu_Seek)(nil),
		(*ApolloPdu_Next)(nil),
		(*ApolloPdu_Prev)(nil),
		(*ApolloPdu_AddIndex)(nil),
		(*ApolloPdu_RemoveIndex)(nil),
		(*ApolloPdu_IndexRead)(nil),
	}
}

func _ApolloPdu_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ApolloPdu)
	// procedure
	switch x := m.Procedure.(type) {
	case *ApolloPdu_Error:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *ApolloPdu_Response:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Response); err != nil {
			return err
		}
	case *ApolloPdu_CreateTable:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateTable); err != nil {
			return err
		}
	case *ApolloPdu_DeleteTable:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteTable); err != nil {
			return err
		}
	case *ApolloPdu_OpenTable:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OpenTable); err != nil {
			return err
		}
	case *ApolloPdu_CloseTable:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CloseTable); err != nil {
			return err
		}
	case *ApolloPdu_TableInfo:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TableInfo); err != nil {
			return err
		}
	case *ApolloPdu_Read:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Read); err != nil {
			return err
		}
	case *ApolloPdu_Write:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Write); err != nil {
			return err
		}
	case *ApolloPdu_Update:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Update); err != nil {
			return err
		}
	case *ApolloPdu_Delete:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Delete); err != nil {
			return err
		}
	case *ApolloPdu_ReadRange:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReadRange); err != nil {
			return err
		}
	case *ApolloPdu_ReadRangeN:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReadRangeN); err != nil {
			return err
		}
	case *ApolloPdu_BatchWrite:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchWrite); err != nil {
			return err
		}
	case *ApolloPdu_First:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.First); err != nil {
			return err
		}
	case *ApolloPdu_Last:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Last); err != nil {
			return err
		}
	case *ApolloPdu_Seek:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Seek); err != nil {
			return err
		}
	case *ApolloPdu_Next:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Next); err != nil {
			return err
		}
	case *ApolloPdu_Prev:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prev); err != nil {
			return err
		}
	case *ApolloPdu_AddIndex:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddIndex); err != nil {
			return err
		}
	case *ApolloPdu_RemoveIndex:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RemoveIndex); err != nil {
			return err
		}
	case *ApolloPdu_IndexRead:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IndexRead); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ApolloPdu.Procedure has unexpected type %T", x)
	}
	return nil
}

func _ApolloPdu_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ApolloPdu)
	switch tag {
	case 3: // procedure.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_Error{msg}
		return true, err
	case 4: // procedure.response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Response)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_Response{msg}
		return true, err
	case 5: // procedure.create_table
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateTable)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_CreateTable{msg}
		return true, err
	case 6: // procedure.delete_table
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteTable)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_DeleteTable{msg}
		return true, err
	case 7: // procedure.open_table
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OpenTable)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_OpenTable{msg}
		return true, err
	case 8: // procedure.close_table
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CloseTable)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_CloseTable{msg}
		return true, err
	case 9: // procedure.table_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableInfo)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_TableInfo{msg}
		return true, err
	case 10: // procedure.read
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Read)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_Read{msg}
		return true, err
	case 11: // procedure.write
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Write)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_Write{msg}
		return true, err
	case 12: // procedure.update
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Update)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_Update{msg}
		return true, err
	case 13: // procedure.delete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Delete)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_Delete{msg}
		return true, err
	case 14: // procedure.read_range
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReadRange)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_ReadRange{msg}
		return true, err
	case 15: // procedure.read_range_n
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReadRangeN)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_ReadRangeN{msg}
		return true, err
	case 16: // procedure.batch_write
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchWrite)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_BatchWrite{msg}
		return true, err
	case 17: // procedure.first
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(First)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_First{msg}
		return true, err
	case 18: // procedure.last
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Last)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_Last{msg}
		return true, err
	case 19: // procedure.seek
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Seek)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_Seek{msg}
		return true, err
	case 20: // procedure.next
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Next)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_Next{msg}
		return true, err
	case 21: // procedure.prev
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Prev)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_Prev{msg}
		return true, err
	case 22: // procedure.add_index
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AddIndex)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_AddIndex{msg}
		return true, err
	case 23: // procedure.remove_index
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RemoveIndex)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_RemoveIndex{msg}
		return true, err
	case 24: // procedure.index_read
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IndexRead)
		err := b.DecodeMessage(msg)
		m.Procedure = &ApolloPdu_IndexRead{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ApolloPdu_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ApolloPdu)
	// procedure
	switch x := m.Procedure.(type) {
	case *ApolloPdu_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_Response:
		s := proto.Size(x.Response)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_CreateTable:
		s := proto.Size(x.CreateTable)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_DeleteTable:
		s := proto.Size(x.DeleteTable)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_OpenTable:
		s := proto.Size(x.OpenTable)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_CloseTable:
		s := proto.Size(x.CloseTable)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_TableInfo:
		s := proto.Size(x.TableInfo)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_Read:
		s := proto.Size(x.Read)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_Write:
		s := proto.Size(x.Write)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_Update:
		s := proto.Size(x.Update)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_Delete:
		s := proto.Size(x.Delete)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_ReadRange:
		s := proto.Size(x.ReadRange)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_ReadRangeN:
		s := proto.Size(x.ReadRangeN)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_BatchWrite:
		s := proto.Size(x.BatchWrite)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_First:
		s := proto.Size(x.First)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_Last:
		s := proto.Size(x.Last)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_Seek:
		s := proto.Size(x.Seek)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_Next:
		s := proto.Size(x.Next)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_Prev:
		s := proto.Size(x.Prev)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_AddIndex:
		s := proto.Size(x.AddIndex)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_RemoveIndex:
		s := proto.Size(x.RemoveIndex)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ApolloPdu_IndexRead:
		s := proto.Size(x.IndexRead)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// **************************************************************
//
// Apollo Procedure Definitions.
//
// **************************************************************
type AuthExchange struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *AuthExchange) Reset()                    { *m = AuthExchange{} }
func (m *AuthExchange) String() string            { return proto.CompactTextString(m) }
func (*AuthExchange) ProtoMessage()               {}
func (*AuthExchange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type BatchWrite struct {
	TableName  string            `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	DeleteKeys []*Field          `protobuf:"bytes,2,rep,name=delete_keys,json=deleteKeys" json:"delete_keys,omitempty"`
	WriteKvps  []*KeyColumnsPair `protobuf:"bytes,3,rep,name=write_kvps,json=writeKvps" json:"write_kvps,omitempty"`
}

func (m *BatchWrite) Reset()                    { *m = BatchWrite{} }
func (m *BatchWrite) String() string            { return proto.CompactTextString(m) }
func (*BatchWrite) ProtoMessage()               {}
func (*BatchWrite) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BatchWrite) GetDeleteKeys() []*Field {
	if m != nil {
		return m.DeleteKeys
	}
	return nil
}

func (m *BatchWrite) GetWriteKvps() []*KeyColumnsPair {
	if m != nil {
		return m.WriteKvps
	}
	return nil
}

type CloseTable struct {
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
}

func (m *CloseTable) Reset()                    { *m = CloseTable{} }
func (m *CloseTable) String() string            { return proto.CompactTextString(m) }
func (*CloseTable) ProtoMessage()               {}
func (*CloseTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type CreateTable struct {
	TableName    string         `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Keys         []string       `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"`
	TableOptions []*TableOption `protobuf:"bytes,3,rep,name=table_options,json=tableOptions" json:"table_options,omitempty"`
}

func (m *CreateTable) Reset()                    { *m = CreateTable{} }
func (m *CreateTable) String() string            { return proto.CompactTextString(m) }
func (*CreateTable) ProtoMessage()               {}
func (*CreateTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateTable) GetTableOptions() []*TableOption {
	if m != nil {
		return m.TableOptions
	}
	return nil
}

type Delete struct {
	TableName string   `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Key       []*Field `protobuf:"bytes,2,rep,name=key" json:"key,omitempty"`
}

func (m *Delete) Reset()                    { *m = Delete{} }
func (m *Delete) String() string            { return proto.CompactTextString(m) }
func (*Delete) ProtoMessage()               {}
func (*Delete) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Delete) GetKey() []*Field {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeleteTable struct {
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
}

func (m *DeleteTable) Reset()                    { *m = DeleteTable{} }
func (m *DeleteTable) String() string            { return proto.CompactTextString(m) }
func (*DeleteTable) ProtoMessage()               {}
func (*DeleteTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Error struct {
	// Types that are valid to be assigned to Cause:
	//	*Error_Transport
	//	*Error_Protocol
	//	*Error_System
	//	*Error_Misc
	Cause isError_Cause `protobuf_oneof:"cause"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isError_Cause interface {
	isError_Cause()
}

type Error_Transport struct {
	Transport string `protobuf:"bytes,1,opt,name=transport,oneof"`
}
type Error_Protocol struct {
	Protocol string `protobuf:"bytes,2,opt,name=protocol,oneof"`
}
type Error_System struct {
	System string `protobuf:"bytes,3,opt,name=system,oneof"`
}
type Error_Misc struct {
	Misc string `protobuf:"bytes,4,opt,name=misc,oneof"`
}

func (*Error_Transport) isError_Cause() {}
func (*Error_Protocol) isError_Cause()  {}
func (*Error_System) isError_Cause()    {}
func (*Error_Misc) isError_Cause()      {}

func (m *Error) GetCause() isError_Cause {
	if m != nil {
		return m.Cause
	}
	return nil
}

func (m *Error) GetTransport() string {
	if x, ok := m.GetCause().(*Error_Transport); ok {
		return x.Transport
	}
	return ""
}

func (m *Error) GetProtocol() string {
	if x, ok := m.GetCause().(*Error_Protocol); ok {
		return x.Protocol
	}
	return ""
}

func (m *Error) GetSystem() string {
	if x, ok := m.GetCause().(*Error_System); ok {
		return x.System
	}
	return ""
}

func (m *Error) GetMisc() string {
	if x, ok := m.GetCause().(*Error_Misc); ok {
		return x.Misc
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Error) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Error_OneofMarshaler, _Error_OneofUnmarshaler, _Error_OneofSizer, []interface{}{
		(*Error_Transport)(nil),
		(*Error_Protocol)(nil),
		(*Error_System)(nil),
		(*Error_Misc)(nil),
	}
}

func _Error_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Error)
	// cause
	switch x := m.Cause.(type) {
	case *Error_Transport:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Transport)
	case *Error_Protocol:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Protocol)
	case *Error_System:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.System)
	case *Error_Misc:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Misc)
	case nil:
	default:
		return fmt.Errorf("Error.Cause has unexpected type %T", x)
	}
	return nil
}

func _Error_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Error)
	switch tag {
	case 1: // cause.transport
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Cause = &Error_Transport{x}
		return true, err
	case 2: // cause.protocol
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Cause = &Error_Protocol{x}
		return true, err
	case 3: // cause.system
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Cause = &Error_System{x}
		return true, err
	case 4: // cause.misc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Cause = &Error_Misc{x}
		return true, err
	default:
		return false, nil
	}
}

func _Error_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Error)
	// cause
	switch x := m.Cause.(type) {
	case *Error_Transport:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Transport)))
		n += len(x.Transport)
	case *Error_Protocol:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Protocol)))
		n += len(x.Protocol)
	case *Error_System:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.System)))
		n += len(x.System)
	case *Error_Misc:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Misc)))
		n += len(x.Misc)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type OpenTable struct {
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
}

func (m *OpenTable) Reset()                    { *m = OpenTable{} }
func (m *OpenTable) String() string            { return proto.CompactTextString(m) }
func (*OpenTable) ProtoMessage()               {}
func (*OpenTable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type Read struct {
	TableName string   `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Key       []*Field `protobuf:"bytes,2,rep,name=key" json:"key,omitempty"`
}

func (m *Read) Reset()                    { *m = Read{} }
func (m *Read) String() string            { return proto.CompactTextString(m) }
func (*Read) ProtoMessage()               {}
func (*Read) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Read) GetKey() []*Field {
	if m != nil {
		return m.Key
	}
	return nil
}

type ReadRange struct {
	TableName string   `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	StartKey  []*Field `protobuf:"bytes,2,rep,name=start_key,json=startKey" json:"start_key,omitempty"`
	EndKey    []*Field `protobuf:"bytes,3,rep,name=end_key,json=endKey" json:"end_key,omitempty"`
	Limit     uint32   `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (m *ReadRange) Reset()                    { *m = ReadRange{} }
func (m *ReadRange) String() string            { return proto.CompactTextString(m) }
func (*ReadRange) ProtoMessage()               {}
func (*ReadRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ReadRange) GetStartKey() []*Field {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *ReadRange) GetEndKey() []*Field {
	if m != nil {
		return m.EndKey
	}
	return nil
}

type ReadRangeN struct {
	TableName string   `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	StartKey  []*Field `protobuf:"bytes,2,rep,name=start_key,json=startKey" json:"start_key,omitempty"`
	N         uint32   `protobuf:"varint,3,opt,name=n" json:"n,omitempty"`
}

func (m *ReadRangeN) Reset()                    { *m = ReadRangeN{} }
func (m *ReadRangeN) String() string            { return proto.CompactTextString(m) }
func (*ReadRangeN) ProtoMessage()               {}
func (*ReadRangeN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ReadRangeN) GetStartKey() []*Field {
	if m != nil {
		return m.StartKey
	}
	return nil
}

type Response struct {
	// Types that are valid to be assigned to Result:
	//	*Response_Ok
	//	*Response_Columns
	//	*Response_KeyColumnsPair
	//	*Response_KeyColumnsList
	//	*Response_Proplist
	//	*Response_KcpIt
	Result           isResponse_Result `protobuf_oneof:"result"`
	MoreDataToBeSent bool              `protobuf:"varint,7,opt,name=more_data_to_be_sent,json=moreDataToBeSent" json:"more_data_to_be_sent,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type isResponse_Result interface {
	isResponse_Result()
}

type Response_Ok struct {
	Ok string `protobuf:"bytes,1,opt,name=ok,oneof"`
}
type Response_Columns struct {
	Columns *Fields `protobuf:"bytes,2,opt,name=columns,oneof"`
}
type Response_KeyColumnsPair struct {
	KeyColumnsPair *KeyColumnsPair `protobuf:"bytes,3,opt,name=key_columns_pair,json=keyColumnsPair,oneof"`
}
type Response_KeyColumnsList struct {
	KeyColumnsList *KeyColumnsList `protobuf:"bytes,4,opt,name=key_columns_list,json=keyColumnsList,oneof"`
}
type Response_Proplist struct {
	Proplist *Fields `protobuf:"bytes,5,opt,name=proplist,oneof"`
}
type Response_KcpIt struct {
	KcpIt *KcpIt `protobuf:"bytes,6,opt,name=kcp_it,json=kcpIt,oneof"`
}

func (*Response_Ok) isResponse_Result()             {}
func (*Response_Columns) isResponse_Result()        {}
func (*Response_KeyColumnsPair) isResponse_Result() {}
func (*Response_KeyColumnsList) isResponse_Result() {}
func (*Response_Proplist) isResponse_Result()       {}
func (*Response_KcpIt) isResponse_Result()          {}

func (m *Response) GetResult() isResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *Response) GetOk() string {
	if x, ok := m.GetResult().(*Response_Ok); ok {
		return x.Ok
	}
	return ""
}

func (m *Response) GetColumns() *Fields {
	if x, ok := m.GetResult().(*Response_Columns); ok {
		return x.Columns
	}
	return nil
}

func (m *Response) GetKeyColumnsPair() *KeyColumnsPair {
	if x, ok := m.GetResult().(*Response_KeyColumnsPair); ok {
		return x.KeyColumnsPair
	}
	return nil
}

func (m *Response) GetKeyColumnsList() *KeyColumnsList {
	if x, ok := m.GetResult().(*Response_KeyColumnsList); ok {
		return x.KeyColumnsList
	}
	return nil
}

func (m *Response) GetProplist() *Fields {
	if x, ok := m.GetResult().(*Response_Proplist); ok {
		return x.Proplist
	}
	return nil
}

func (m *Response) GetKcpIt() *KcpIt {
	if x, ok := m.GetResult().(*Response_KcpIt); ok {
		return x.KcpIt
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Response) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Response_OneofMarshaler, _Response_OneofUnmarshaler, _Response_OneofSizer, []interface{}{
		(*Response_Ok)(nil),
		(*Response_Columns)(nil),
		(*Response_KeyColumnsPair)(nil),
		(*Response_KeyColumnsList)(nil),
		(*Response_Proplist)(nil),
		(*Response_KcpIt)(nil),
	}
}

func _Response_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Response)
	// result
	switch x := m.Result.(type) {
	case *Response_Ok:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Ok)
	case *Response_Columns:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Columns); err != nil {
			return err
		}
	case *Response_KeyColumnsPair:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KeyColumnsPair); err != nil {
			return err
		}
	case *Response_KeyColumnsList:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KeyColumnsList); err != nil {
			return err
		}
	case *Response_Proplist:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Proplist); err != nil {
			return err
		}
	case *Response_KcpIt:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KcpIt); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Response.Result has unexpected type %T", x)
	}
	return nil
}

func _Response_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Response)
	switch tag {
	case 1: // result.ok
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Result = &Response_Ok{x}
		return true, err
	case 2: // result.columns
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Fields)
		err := b.DecodeMessage(msg)
		m.Result = &Response_Columns{msg}
		return true, err
	case 3: // result.key_columns_pair
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KeyColumnsPair)
		err := b.DecodeMessage(msg)
		m.Result = &Response_KeyColumnsPair{msg}
		return true, err
	case 4: // result.key_columns_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KeyColumnsList)
		err := b.DecodeMessage(msg)
		m.Result = &Response_KeyColumnsList{msg}
		return true, err
	case 5: // result.proplist
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Fields)
		err := b.DecodeMessage(msg)
		m.Result = &Response_Proplist{msg}
		return true, err
	case 6: // result.kcp_it
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KcpIt)
		err := b.DecodeMessage(msg)
		m.Result = &Response_KcpIt{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Response_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Response)
	// result
	switch x := m.Result.(type) {
	case *Response_Ok:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Ok)))
		n += len(x.Ok)
	case *Response_Columns:
		s := proto.Size(x.Columns)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_KeyColumnsPair:
		s := proto.Size(x.KeyColumnsPair)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_KeyColumnsList:
		s := proto.Size(x.KeyColumnsList)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Proplist:
		s := proto.Size(x.Proplist)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_KcpIt:
		s := proto.Size(x.KcpIt)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TableInfo struct {
	TableName  string   `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Attributes []string `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *TableInfo) Reset()                    { *m = TableInfo{} }
func (m *TableInfo) String() string            { return proto.CompactTextString(m) }
func (*TableInfo) ProtoMessage()               {}
func (*TableInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type Update struct {
	TableName       string             `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Key             []*Field           `protobuf:"bytes,2,rep,name=key" json:"key,omitempty"`
	UpdateOperation []*UpdateOperation `protobuf:"bytes,3,rep,name=update_operation,json=updateOperation" json:"update_operation,omitempty"`
}

func (m *Update) Reset()                    { *m = Update{} }
func (m *Update) String() string            { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()               {}
func (*Update) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Update) GetKey() []*Field {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Update) GetUpdateOperation() []*UpdateOperation {
	if m != nil {
		return m.UpdateOperation
	}
	return nil
}

type Write struct {
	TableName string   `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Key       []*Field `protobuf:"bytes,2,rep,name=key" json:"key,omitempty"`
	Columns   []*Field `protobuf:"bytes,3,rep,name=columns" json:"columns,omitempty"`
}

func (m *Write) Reset()                    { *m = Write{} }
func (m *Write) String() string            { return proto.CompactTextString(m) }
func (*Write) ProtoMessage()               {}
func (*Write) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Write) GetKey() []*Field {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Write) GetColumns() []*Field {
	if m != nil {
		return m.Columns
	}
	return nil
}

type First struct {
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
}

func (m *First) Reset()                    { *m = First{} }
func (m *First) String() string            { return proto.CompactTextString(m) }
func (*First) ProtoMessage()               {}
func (*First) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type Last struct {
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
}

func (m *Last) Reset()                    { *m = Last{} }
func (m *Last) String() string            { return proto.CompactTextString(m) }
func (*Last) ProtoMessage()               {}
func (*Last) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type Seek struct {
	TableName string   `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Key       []*Field `protobuf:"bytes,2,rep,name=key" json:"key,omitempty"`
}

func (m *Seek) Reset()                    { *m = Seek{} }
func (m *Seek) String() string            { return proto.CompactTextString(m) }
func (*Seek) ProtoMessage()               {}
func (*Seek) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Seek) GetKey() []*Field {
	if m != nil {
		return m.Key
	}
	return nil
}

type Next struct {
	It []byte `protobuf:"bytes,1,opt,name=it,proto3" json:"it,omitempty"`
}

func (m *Next) Reset()                    { *m = Next{} }
func (m *Next) String() string            { return proto.CompactTextString(m) }
func (*Next) ProtoMessage()               {}
func (*Next) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type Prev struct {
	It []byte `protobuf:"bytes,1,opt,name=it,proto3" json:"it,omitempty"`
}

func (m *Prev) Reset()                    { *m = Prev{} }
func (m *Prev) String() string            { return proto.CompactTextString(m) }
func (*Prev) ProtoMessage()               {}
func (*Prev) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type AddIndex struct {
	TableName string   `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Columns   []string `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
}

func (m *AddIndex) Reset()                    { *m = AddIndex{} }
func (m *AddIndex) String() string            { return proto.CompactTextString(m) }
func (*AddIndex) ProtoMessage()               {}
func (*AddIndex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type RemoveIndex struct {
	TableName string   `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	Columns   []string `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
}

func (m *RemoveIndex) Reset()                    { *m = RemoveIndex{} }
func (m *RemoveIndex) String() string            { return proto.CompactTextString(m) }
func (*RemoveIndex) ProtoMessage()               {}
func (*RemoveIndex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type IndexRead struct {
	TableName  string `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	ColumnName string `protobuf:"bytes,2,opt,name=column_name,json=columnName" json:"column_name,omitempty"`
	Term       string `protobuf:"bytes,3,opt,name=term" json:"term,omitempty"`
}

func (m *IndexRead) Reset()                    { *m = IndexRead{} }
func (m *IndexRead) String() string            { return proto.CompactTextString(m) }
func (*IndexRead) ProtoMessage()               {}
func (*IndexRead) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type Continuation struct {
	Complete bool     `protobuf:"varint,1,opt,name=complete" json:"complete,omitempty"`
	Key      []*Field `protobuf:"bytes,2,rep,name=key" json:"key,omitempty"`
}

func (m *Continuation) Reset()                    { *m = Continuation{} }
func (m *Continuation) String() string            { return proto.CompactTextString(m) }
func (*Continuation) ProtoMessage()               {}
func (*Continuation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Continuation) GetKey() []*Field {
	if m != nil {
		return m.Key
	}
	return nil
}

type Field struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*Field_Boolean
	//	*Field_Int
	//	*Field_Binary
	//	*Field_Null
	//	*Field_Double
	//	*Field_String_
	Value isField_Value `protobuf_oneof:"value"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type isField_Value interface {
	isField_Value()
}

type Field_Boolean struct {
	Boolean bool `protobuf:"varint,2,opt,name=boolean,oneof"`
}
type Field_Int struct {
	Int int64 `protobuf:"varint,3,opt,name=int,oneof"`
}
type Field_Binary struct {
	Binary []byte `protobuf:"bytes,4,opt,name=binary,proto3,oneof"`
}
type Field_Null struct {
	Null []byte `protobuf:"bytes,5,opt,name=null,proto3,oneof"`
}
type Field_Double struct {
	Double float64 `protobuf:"fixed64,6,opt,name=double,oneof"`
}
type Field_String_ struct {
	String_ string `protobuf:"bytes,7,opt,name=string,oneof"`
}

func (*Field_Boolean) isField_Value() {}
func (*Field_Int) isField_Value()     {}
func (*Field_Binary) isField_Value()  {}
func (*Field_Null) isField_Value()    {}
func (*Field_Double) isField_Value()  {}
func (*Field_String_) isField_Value() {}

func (m *Field) GetValue() isField_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Field) GetBoolean() bool {
	if x, ok := m.GetValue().(*Field_Boolean); ok {
		return x.Boolean
	}
	return false
}

func (m *Field) GetInt() int64 {
	if x, ok := m.GetValue().(*Field_Int); ok {
		return x.Int
	}
	return 0
}

func (m *Field) GetBinary() []byte {
	if x, ok := m.GetValue().(*Field_Binary); ok {
		return x.Binary
	}
	return nil
}

func (m *Field) GetNull() []byte {
	if x, ok := m.GetValue().(*Field_Null); ok {
		return x.Null
	}
	return nil
}

func (m *Field) GetDouble() float64 {
	if x, ok := m.GetValue().(*Field_Double); ok {
		return x.Double
	}
	return 0
}

func (m *Field) GetString_() string {
	if x, ok := m.GetValue().(*Field_String_); ok {
		return x.String_
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Field) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Field_OneofMarshaler, _Field_OneofUnmarshaler, _Field_OneofSizer, []interface{}{
		(*Field_Boolean)(nil),
		(*Field_Int)(nil),
		(*Field_Binary)(nil),
		(*Field_Null)(nil),
		(*Field_Double)(nil),
		(*Field_String_)(nil),
	}
}

func _Field_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Field)
	// value
	switch x := m.Value.(type) {
	case *Field_Boolean:
		t := uint64(0)
		if x.Boolean {
			t = 1
		}
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Field_Int:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int))
	case *Field_Binary:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Binary)
	case *Field_Null:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Null)
	case *Field_Double:
		b.EncodeVarint(6<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.Double))
	case *Field_String_:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.String_)
	case nil:
	default:
		return fmt.Errorf("Field.Value has unexpected type %T", x)
	}
	return nil
}

func _Field_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Field)
	switch tag {
	case 2: // value.boolean
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Field_Boolean{x != 0}
		return true, err
	case 3: // value.int
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Field_Int{int64(x)}
		return true, err
	case 4: // value.binary
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &Field_Binary{x}
		return true, err
	case 5: // value.null
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &Field_Null{x}
		return true, err
	case 6: // value.double
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &Field_Double{math.Float64frombits(x)}
		return true, err
	case 7: // value.string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Field_String_{x}
		return true, err
	default:
		return false, nil
	}
}

func _Field_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Field)
	// value
	switch x := m.Value.(type) {
	case *Field_Boolean:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += 1
	case *Field_Int:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int))
	case *Field_Binary:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Binary)))
		n += len(x.Binary)
	case *Field_Null:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Null)))
		n += len(x.Null)
	case *Field_Double:
		n += proto.SizeVarint(6<<3 | proto.WireFixed64)
		n += 8
	case *Field_String_:
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.String_)))
		n += len(x.String_)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FieldNames struct {
	FieldNames []string `protobuf:"bytes,1,rep,name=field_names,json=fieldNames" json:"field_names,omitempty"`
}

func (m *FieldNames) Reset()                    { *m = FieldNames{} }
func (m *FieldNames) String() string            { return proto.CompactTextString(m) }
func (*FieldNames) ProtoMessage()               {}
func (*FieldNames) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type Fields struct {
	Fields []*Field `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
}

func (m *Fields) Reset()                    { *m = Fields{} }
func (m *Fields) String() string            { return proto.CompactTextString(m) }
func (*Fields) ProtoMessage()               {}
func (*Fields) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *Fields) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

type KeyColumnsPair struct {
	Key     []*Field `protobuf:"bytes,1,rep,name=key" json:"key,omitempty"`
	Columns []*Field `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
}

func (m *KeyColumnsPair) Reset()                    { *m = KeyColumnsPair{} }
func (m *KeyColumnsPair) String() string            { return proto.CompactTextString(m) }
func (*KeyColumnsPair) ProtoMessage()               {}
func (*KeyColumnsPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *KeyColumnsPair) GetKey() []*Field {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyColumnsPair) GetColumns() []*Field {
	if m != nil {
		return m.Columns
	}
	return nil
}

type KeyColumnsList struct {
	List         []*KeyColumnsPair `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Continuation *Continuation     `protobuf:"bytes,2,opt,name=continuation" json:"continuation,omitempty"`
}

func (m *KeyColumnsList) Reset()                    { *m = KeyColumnsList{} }
func (m *KeyColumnsList) String() string            { return proto.CompactTextString(m) }
func (*KeyColumnsList) ProtoMessage()               {}
func (*KeyColumnsList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *KeyColumnsList) GetList() []*KeyColumnsPair {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *KeyColumnsList) GetContinuation() *Continuation {
	if m != nil {
		return m.Continuation
	}
	return nil
}

type KcpIt struct {
	KeyColumnsPair *KeyColumnsPair `protobuf:"bytes,1,opt,name=key_columns_pair,json=keyColumnsPair" json:"key_columns_pair,omitempty"`
	It             []byte          `protobuf:"bytes,2,opt,name=it,proto3" json:"it,omitempty"`
}

func (m *KcpIt) Reset()                    { *m = KcpIt{} }
func (m *KcpIt) String() string            { return proto.CompactTextString(m) }
func (*KcpIt) ProtoMessage()               {}
func (*KcpIt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *KcpIt) GetKeyColumnsPair() *KeyColumnsPair {
	if m != nil {
		return m.KeyColumnsPair
	}
	return nil
}

type TableOption struct {
	// Types that are valid to be assigned to Opt:
	//	*TableOption_Type
	//	*TableOption_DataModel
	//	*TableOption_Wrapper
	//	*TableOption_MemWrapper
	//	*TableOption_Tda
	//	*TableOption_Comparator
	//	*TableOption_TimeSeries
	//	*TableOption_Shards
	//	*TableOption_Distributed
	//	*TableOption_ReplicationFactor
	//	*TableOption_HashExlude
	//	*TableOption_HashingMethod
	Opt isTableOption_Opt `protobuf_oneof:"opt"`
}

func (m *TableOption) Reset()                    { *m = TableOption{} }
func (m *TableOption) String() string            { return proto.CompactTextString(m) }
func (*TableOption) ProtoMessage()               {}
func (*TableOption) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

type isTableOption_Opt interface {
	isTableOption_Opt()
}

type TableOption_Type struct {
	Type Type `protobuf:"varint,1,opt,name=type,enum=Type,oneof"`
}
type TableOption_DataModel struct {
	DataModel DataModel `protobuf:"varint,2,opt,name=data_model,json=dataModel,enum=DataModel,oneof"`
}
type TableOption_Wrapper struct {
	Wrapper *Wrapper `protobuf:"bytes,3,opt,name=wrapper,oneof"`
}
type TableOption_MemWrapper struct {
	MemWrapper *Wrapper `protobuf:"bytes,4,opt,name=mem_wrapper,json=memWrapper,oneof"`
}
type TableOption_Tda struct {
	Tda *Tda `protobuf:"bytes,5,opt,name=tda,oneof"`
}
type TableOption_Comparator struct {
	Comparator Comparator `protobuf:"varint,6,opt,name=comparator,enum=Comparator,oneof"`
}
type TableOption_TimeSeries struct {
	TimeSeries bool `protobuf:"varint,7,opt,name=time_series,json=timeSeries,oneof"`
}
type TableOption_Shards struct {
	Shards uint32 `protobuf:"varint,8,opt,name=shards,oneof"`
}
type TableOption_Distributed struct {
	Distributed bool `protobuf:"varint,9,opt,name=distributed,oneof"`
}
type TableOption_ReplicationFactor struct {
	ReplicationFactor uint32 `protobuf:"varint,10,opt,name=replication_factor,json=replicationFactor,oneof"`
}
type TableOption_HashExlude struct {
	HashExlude *FieldNames `protobuf:"bytes,11,opt,name=hash_exlude,json=hashExlude,oneof"`
}
type TableOption_HashingMethod struct {
	HashingMethod HashingMethod `protobuf:"varint,12,opt,name=hashing_method,json=hashingMethod,enum=HashingMethod,oneof"`
}

func (*TableOption_Type) isTableOption_Opt()              {}
func (*TableOption_DataModel) isTableOption_Opt()         {}
func (*TableOption_Wrapper) isTableOption_Opt()           {}
func (*TableOption_MemWrapper) isTableOption_Opt()        {}
func (*TableOption_Tda) isTableOption_Opt()               {}
func (*TableOption_Comparator) isTableOption_Opt()        {}
func (*TableOption_TimeSeries) isTableOption_Opt()        {}
func (*TableOption_Shards) isTableOption_Opt()            {}
func (*TableOption_Distributed) isTableOption_Opt()       {}
func (*TableOption_ReplicationFactor) isTableOption_Opt() {}
func (*TableOption_HashExlude) isTableOption_Opt()        {}
func (*TableOption_HashingMethod) isTableOption_Opt()     {}

func (m *TableOption) GetOpt() isTableOption_Opt {
	if m != nil {
		return m.Opt
	}
	return nil
}

func (m *TableOption) GetType() Type {
	if x, ok := m.GetOpt().(*TableOption_Type); ok {
		return x.Type
	}
	return Type_LEVELDB
}

func (m *TableOption) GetDataModel() DataModel {
	if x, ok := m.GetOpt().(*TableOption_DataModel); ok {
		return x.DataModel
	}
	return DataModel_KV
}

func (m *TableOption) GetWrapper() *Wrapper {
	if x, ok := m.GetOpt().(*TableOption_Wrapper); ok {
		return x.Wrapper
	}
	return nil
}

func (m *TableOption) GetMemWrapper() *Wrapper {
	if x, ok := m.GetOpt().(*TableOption_MemWrapper); ok {
		return x.MemWrapper
	}
	return nil
}

func (m *TableOption) GetTda() *Tda {
	if x, ok := m.GetOpt().(*TableOption_Tda); ok {
		return x.Tda
	}
	return nil
}

func (m *TableOption) GetComparator() Comparator {
	if x, ok := m.GetOpt().(*TableOption_Comparator); ok {
		return x.Comparator
	}
	return Comparator_DESCENDING
}

func (m *TableOption) GetTimeSeries() bool {
	if x, ok := m.GetOpt().(*TableOption_TimeSeries); ok {
		return x.TimeSeries
	}
	return false
}

func (m *TableOption) GetShards() uint32 {
	if x, ok := m.GetOpt().(*TableOption_Shards); ok {
		return x.Shards
	}
	return 0
}

func (m *TableOption) GetDistributed() bool {
	if x, ok := m.GetOpt().(*TableOption_Distributed); ok {
		return x.Distributed
	}
	return false
}

func (m *TableOption) GetReplicationFactor() uint32 {
	if x, ok := m.GetOpt().(*TableOption_ReplicationFactor); ok {
		return x.ReplicationFactor
	}
	return 0
}

func (m *TableOption) GetHashExlude() *FieldNames {
	if x, ok := m.GetOpt().(*TableOption_HashExlude); ok {
		return x.HashExlude
	}
	return nil
}

func (m *TableOption) GetHashingMethod() HashingMethod {
	if x, ok := m.GetOpt().(*TableOption_HashingMethod); ok {
		return x.HashingMethod
	}
	return HashingMethod_VIRTUALNODES
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TableOption) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TableOption_OneofMarshaler, _TableOption_OneofUnmarshaler, _TableOption_OneofSizer, []interface{}{
		(*TableOption_Type)(nil),
		(*TableOption_DataModel)(nil),
		(*TableOption_Wrapper)(nil),
		(*TableOption_MemWrapper)(nil),
		(*TableOption_Tda)(nil),
		(*TableOption_Comparator)(nil),
		(*TableOption_TimeSeries)(nil),
		(*TableOption_Shards)(nil),
		(*TableOption_Distributed)(nil),
		(*TableOption_ReplicationFactor)(nil),
		(*TableOption_HashExlude)(nil),
		(*TableOption_HashingMethod)(nil),
	}
}

func _TableOption_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TableOption)
	// opt
	switch x := m.Opt.(type) {
	case *TableOption_Type:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Type))
	case *TableOption_DataModel:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.DataModel))
	case *TableOption_Wrapper:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Wrapper); err != nil {
			return err
		}
	case *TableOption_MemWrapper:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MemWrapper); err != nil {
			return err
		}
	case *TableOption_Tda:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tda); err != nil {
			return err
		}
	case *TableOption_Comparator:
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Comparator))
	case *TableOption_TimeSeries:
		t := uint64(0)
		if x.TimeSeries {
			t = 1
		}
		b.EncodeVarint(7<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *TableOption_Shards:
		b.EncodeVarint(8<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Shards))
	case *TableOption_Distributed:
		t := uint64(0)
		if x.Distributed {
			t = 1
		}
		b.EncodeVarint(9<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *TableOption_ReplicationFactor:
		b.EncodeVarint(10<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ReplicationFactor))
	case *TableOption_HashExlude:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashExlude); err != nil {
			return err
		}
	case *TableOption_HashingMethod:
		b.EncodeVarint(12<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.HashingMethod))
	case nil:
	default:
		return fmt.Errorf("TableOption.Opt has unexpected type %T", x)
	}
	return nil
}

func _TableOption_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TableOption)
	switch tag {
	case 1: // opt.type
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Opt = &TableOption_Type{Type(x)}
		return true, err
	case 2: // opt.data_model
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Opt = &TableOption_DataModel{DataModel(x)}
		return true, err
	case 3: // opt.wrapper
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Wrapper)
		err := b.DecodeMessage(msg)
		m.Opt = &TableOption_Wrapper{msg}
		return true, err
	case 4: // opt.mem_wrapper
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Wrapper)
		err := b.DecodeMessage(msg)
		m.Opt = &TableOption_MemWrapper{msg}
		return true, err
	case 5: // opt.tda
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Tda)
		err := b.DecodeMessage(msg)
		m.Opt = &TableOption_Tda{msg}
		return true, err
	case 6: // opt.comparator
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Opt = &TableOption_Comparator{Comparator(x)}
		return true, err
	case 7: // opt.time_series
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Opt = &TableOption_TimeSeries{x != 0}
		return true, err
	case 8: // opt.shards
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Opt = &TableOption_Shards{uint32(x)}
		return true, err
	case 9: // opt.distributed
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Opt = &TableOption_Distributed{x != 0}
		return true, err
	case 10: // opt.replication_factor
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Opt = &TableOption_ReplicationFactor{uint32(x)}
		return true, err
	case 11: // opt.hash_exlude
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FieldNames)
		err := b.DecodeMessage(msg)
		m.Opt = &TableOption_HashExlude{msg}
		return true, err
	case 12: // opt.hashing_method
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Opt = &TableOption_HashingMethod{HashingMethod(x)}
		return true, err
	default:
		return false, nil
	}
}

func _TableOption_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TableOption)
	// opt
	switch x := m.Opt.(type) {
	case *TableOption_Type:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Type))
	case *TableOption_DataModel:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.DataModel))
	case *TableOption_Wrapper:
		s := proto.Size(x.Wrapper)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableOption_MemWrapper:
		s := proto.Size(x.MemWrapper)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableOption_Tda:
		s := proto.Size(x.Tda)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableOption_Comparator:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Comparator))
	case *TableOption_TimeSeries:
		n += proto.SizeVarint(7<<3 | proto.WireVarint)
		n += 1
	case *TableOption_Shards:
		n += proto.SizeVarint(8<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Shards))
	case *TableOption_Distributed:
		n += proto.SizeVarint(9<<3 | proto.WireVarint)
		n += 1
	case *TableOption_ReplicationFactor:
		n += proto.SizeVarint(10<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ReplicationFactor))
	case *TableOption_HashExlude:
		s := proto.Size(x.HashExlude)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableOption_HashingMethod:
		n += proto.SizeVarint(12<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.HashingMethod))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Tda struct {
	NumOfBuckets uint32 `protobuf:"varint,1,opt,name=num_of_buckets,json=numOfBuckets" json:"num_of_buckets,omitempty"`
	// Types that are valid to be assigned to TimeMargin:
	//	*Tda_Seconds
	//	*Tda_Minutes
	//	*Tda_Hours
	TimeMargin isTda_TimeMargin `protobuf_oneof:"time_margin"`
	TsField    string           `protobuf:"bytes,5,opt,name=ts_field,json=tsField" json:"ts_field,omitempty"`
	Precision  TimeUnit         `protobuf:"varint,6,opt,name=precision,enum=TimeUnit" json:"precision,omitempty"`
}

func (m *Tda) Reset()                    { *m = Tda{} }
func (m *Tda) String() string            { return proto.CompactTextString(m) }
func (*Tda) ProtoMessage()               {}
func (*Tda) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

type isTda_TimeMargin interface {
	isTda_TimeMargin()
}

type Tda_Seconds struct {
	Seconds uint32 `protobuf:"varint,2,opt,name=seconds,oneof"`
}
type Tda_Minutes struct {
	Minutes uint32 `protobuf:"varint,3,opt,name=minutes,oneof"`
}
type Tda_Hours struct {
	Hours uint32 `protobuf:"varint,4,opt,name=hours,oneof"`
}

func (*Tda_Seconds) isTda_TimeMargin() {}
func (*Tda_Minutes) isTda_TimeMargin() {}
func (*Tda_Hours) isTda_TimeMargin()   {}

func (m *Tda) GetTimeMargin() isTda_TimeMargin {
	if m != nil {
		return m.TimeMargin
	}
	return nil
}

func (m *Tda) GetSeconds() uint32 {
	if x, ok := m.GetTimeMargin().(*Tda_Seconds); ok {
		return x.Seconds
	}
	return 0
}

func (m *Tda) GetMinutes() uint32 {
	if x, ok := m.GetTimeMargin().(*Tda_Minutes); ok {
		return x.Minutes
	}
	return 0
}

func (m *Tda) GetHours() uint32 {
	if x, ok := m.GetTimeMargin().(*Tda_Hours); ok {
		return x.Hours
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Tda) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Tda_OneofMarshaler, _Tda_OneofUnmarshaler, _Tda_OneofSizer, []interface{}{
		(*Tda_Seconds)(nil),
		(*Tda_Minutes)(nil),
		(*Tda_Hours)(nil),
	}
}

func _Tda_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Tda)
	// time_margin
	switch x := m.TimeMargin.(type) {
	case *Tda_Seconds:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Seconds))
	case *Tda_Minutes:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Minutes))
	case *Tda_Hours:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Hours))
	case nil:
	default:
		return fmt.Errorf("Tda.TimeMargin has unexpected type %T", x)
	}
	return nil
}

func _Tda_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Tda)
	switch tag {
	case 2: // time_margin.seconds
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TimeMargin = &Tda_Seconds{uint32(x)}
		return true, err
	case 3: // time_margin.minutes
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TimeMargin = &Tda_Minutes{uint32(x)}
		return true, err
	case 4: // time_margin.hours
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TimeMargin = &Tda_Hours{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Tda_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Tda)
	// time_margin
	switch x := m.TimeMargin.(type) {
	case *Tda_Seconds:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Seconds))
	case *Tda_Minutes:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Minutes))
	case *Tda_Hours:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Hours))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UpdateInstruction struct {
	Instruction UpdateInstruction_Instruction `protobuf:"varint,8,opt,name=instruction,enum=UpdateInstruction_Instruction" json:"instruction,omitempty"`
	// empty bytes denote nil. proto3 defaults to 0 for numeric values
	// thus, we use bytes to distinguish if 0 is explictly set.
	Threshold []byte `protobuf:"bytes,14,opt,name=threshold,proto3" json:"threshold,omitempty"`
	SetValue  []byte `protobuf:"bytes,15,opt,name=set_value,json=setValue,proto3" json:"set_value,omitempty"`
}

func (m *UpdateInstruction) Reset()                    { *m = UpdateInstruction{} }
func (m *UpdateInstruction) String() string            { return proto.CompactTextString(m) }
func (*UpdateInstruction) ProtoMessage()               {}
func (*UpdateInstruction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

type UpdateOperation struct {
	Field             string             `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
	UpdateInstruction *UpdateInstruction `protobuf:"bytes,2,opt,name=update_instruction,json=updateInstruction" json:"update_instruction,omitempty"`
	Value             *Value             `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	DefaultValue      *Value             `protobuf:"bytes,4,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
}

func (m *UpdateOperation) Reset()                    { *m = UpdateOperation{} }
func (m *UpdateOperation) String() string            { return proto.CompactTextString(m) }
func (*UpdateOperation) ProtoMessage()               {}
func (*UpdateOperation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *UpdateOperation) GetUpdateInstruction() *UpdateInstruction {
	if m != nil {
		return m.UpdateInstruction
	}
	return nil
}

func (m *UpdateOperation) GetValue() *Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *UpdateOperation) GetDefaultValue() *Value {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

type Value struct {
	// Types that are valid to be assigned to Value:
	//	*Value_Boolean
	//	*Value_Int
	//	*Value_Binary
	//	*Value_Null
	//	*Value_Double
	//	*Value_String_
	Value isValue_Value `protobuf_oneof:"value"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

type isValue_Value interface {
	isValue_Value()
}

type Value_Boolean struct {
	Boolean bool `protobuf:"varint,1,opt,name=boolean,oneof"`
}
type Value_Int struct {
	Int int64 `protobuf:"varint,2,opt,name=int,oneof"`
}
type Value_Binary struct {
	Binary []byte `protobuf:"bytes,3,opt,name=binary,proto3,oneof"`
}
type Value_Null struct {
	Null []byte `protobuf:"bytes,4,opt,name=null,proto3,oneof"`
}
type Value_Double struct {
	Double float64 `protobuf:"fixed64,5,opt,name=double,oneof"`
}
type Value_String_ struct {
	String_ string `protobuf:"bytes,6,opt,name=string,oneof"`
}

func (*Value_Boolean) isValue_Value() {}
func (*Value_Int) isValue_Value()     {}
func (*Value_Binary) isValue_Value()  {}
func (*Value_Null) isValue_Value()    {}
func (*Value_Double) isValue_Value()  {}
func (*Value_String_) isValue_Value() {}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Value) GetBoolean() bool {
	if x, ok := m.GetValue().(*Value_Boolean); ok {
		return x.Boolean
	}
	return false
}

func (m *Value) GetInt() int64 {
	if x, ok := m.GetValue().(*Value_Int); ok {
		return x.Int
	}
	return 0
}

func (m *Value) GetBinary() []byte {
	if x, ok := m.GetValue().(*Value_Binary); ok {
		return x.Binary
	}
	return nil
}

func (m *Value) GetNull() []byte {
	if x, ok := m.GetValue().(*Value_Null); ok {
		return x.Null
	}
	return nil
}

func (m *Value) GetDouble() float64 {
	if x, ok := m.GetValue().(*Value_Double); ok {
		return x.Double
	}
	return 0
}

func (m *Value) GetString_() string {
	if x, ok := m.GetValue().(*Value_String_); ok {
		return x.String_
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Value_OneofMarshaler, _Value_OneofUnmarshaler, _Value_OneofSizer, []interface{}{
		(*Value_Boolean)(nil),
		(*Value_Int)(nil),
		(*Value_Binary)(nil),
		(*Value_Null)(nil),
		(*Value_Double)(nil),
		(*Value_String_)(nil),
	}
}

func _Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Value)
	// value
	switch x := m.Value.(type) {
	case *Value_Boolean:
		t := uint64(0)
		if x.Boolean {
			t = 1
		}
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Value_Int:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int))
	case *Value_Binary:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Binary)
	case *Value_Null:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Null)
	case *Value_Double:
		b.EncodeVarint(5<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.Double))
	case *Value_String_:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.String_)
	case nil:
	default:
		return fmt.Errorf("Value.Value has unexpected type %T", x)
	}
	return nil
}

func _Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Value)
	switch tag {
	case 1: // value.boolean
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Value_Boolean{x != 0}
		return true, err
	case 2: // value.int
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Value_Int{int64(x)}
		return true, err
	case 3: // value.binary
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &Value_Binary{x}
		return true, err
	case 4: // value.null
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &Value_Null{x}
		return true, err
	case 5: // value.double
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &Value_Double{math.Float64frombits(x)}
		return true, err
	case 6: // value.string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Value_String_{x}
		return true, err
	default:
		return false, nil
	}
}

func _Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Value)
	// value
	switch x := m.Value.(type) {
	case *Value_Boolean:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += 1
	case *Value_Int:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int))
	case *Value_Binary:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Binary)))
		n += len(x.Binary)
	case *Value_Null:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Null)))
		n += len(x.Null)
	case *Value_Double:
		n += proto.SizeVarint(5<<3 | proto.WireFixed64)
		n += 8
	case *Value_String_:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.String_)))
		n += len(x.String_)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Version struct {
	Major uint32 `protobuf:"varint,1,opt,name=major" json:"major,omitempty"`
	Minor uint32 `protobuf:"varint,2,opt,name=minor" json:"minor,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

type Wrapper struct {
	NumOfBuckets uint32 `protobuf:"varint,1,opt,name=num_of_buckets,json=numOfBuckets" json:"num_of_buckets,omitempty"`
	// Types that are valid to be assigned to TimeMargin:
	//	*Wrapper_Seconds
	//	*Wrapper_Minutes
	//	*Wrapper_Hours
	TimeMargin isWrapper_TimeMargin `protobuf_oneof:"time_margin"`
	// Types that are valid to be assigned to SizeMargin:
	//	*Wrapper_Megabytes
	//	*Wrapper_Gigabytes
	SizeMargin isWrapper_SizeMargin `protobuf_oneof:"size_margin"`
}

func (m *Wrapper) Reset()                    { *m = Wrapper{} }
func (m *Wrapper) String() string            { return proto.CompactTextString(m) }
func (*Wrapper) ProtoMessage()               {}
func (*Wrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

type isWrapper_TimeMargin interface {
	isWrapper_TimeMargin()
}
type isWrapper_SizeMargin interface {
	isWrapper_SizeMargin()
}

type Wrapper_Seconds struct {
	Seconds uint32 `protobuf:"varint,2,opt,name=seconds,oneof"`
}
type Wrapper_Minutes struct {
	Minutes uint32 `protobuf:"varint,3,opt,name=minutes,oneof"`
}
type Wrapper_Hours struct {
	Hours uint32 `protobuf:"varint,4,opt,name=hours,oneof"`
}
type Wrapper_Megabytes struct {
	Megabytes uint32 `protobuf:"varint,5,opt,name=megabytes,oneof"`
}
type Wrapper_Gigabytes struct {
	Gigabytes uint32 `protobuf:"varint,6,opt,name=gigabytes,oneof"`
}

func (*Wrapper_Seconds) isWrapper_TimeMargin()   {}
func (*Wrapper_Minutes) isWrapper_TimeMargin()   {}
func (*Wrapper_Hours) isWrapper_TimeMargin()     {}
func (*Wrapper_Megabytes) isWrapper_SizeMargin() {}
func (*Wrapper_Gigabytes) isWrapper_SizeMargin() {}

func (m *Wrapper) GetTimeMargin() isWrapper_TimeMargin {
	if m != nil {
		return m.TimeMargin
	}
	return nil
}
func (m *Wrapper) GetSizeMargin() isWrapper_SizeMargin {
	if m != nil {
		return m.SizeMargin
	}
	return nil
}

func (m *Wrapper) GetSeconds() uint32 {
	if x, ok := m.GetTimeMargin().(*Wrapper_Seconds); ok {
		return x.Seconds
	}
	return 0
}

func (m *Wrapper) GetMinutes() uint32 {
	if x, ok := m.GetTimeMargin().(*Wrapper_Minutes); ok {
		return x.Minutes
	}
	return 0
}

func (m *Wrapper) GetHours() uint32 {
	if x, ok := m.GetTimeMargin().(*Wrapper_Hours); ok {
		return x.Hours
	}
	return 0
}

func (m *Wrapper) GetMegabytes() uint32 {
	if x, ok := m.GetSizeMargin().(*Wrapper_Megabytes); ok {
		return x.Megabytes
	}
	return 0
}

func (m *Wrapper) GetGigabytes() uint32 {
	if x, ok := m.GetSizeMargin().(*Wrapper_Gigabytes); ok {
		return x.Gigabytes
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Wrapper) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Wrapper_OneofMarshaler, _Wrapper_OneofUnmarshaler, _Wrapper_OneofSizer, []interface{}{
		(*Wrapper_Seconds)(nil),
		(*Wrapper_Minutes)(nil),
		(*Wrapper_Hours)(nil),
		(*Wrapper_Megabytes)(nil),
		(*Wrapper_Gigabytes)(nil),
	}
}

func _Wrapper_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Wrapper)
	// time_margin
	switch x := m.TimeMargin.(type) {
	case *Wrapper_Seconds:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Seconds))
	case *Wrapper_Minutes:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Minutes))
	case *Wrapper_Hours:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Hours))
	case nil:
	default:
		return fmt.Errorf("Wrapper.TimeMargin has unexpected type %T", x)
	}
	// size_margin
	switch x := m.SizeMargin.(type) {
	case *Wrapper_Megabytes:
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Megabytes))
	case *Wrapper_Gigabytes:
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Gigabytes))
	case nil:
	default:
		return fmt.Errorf("Wrapper.SizeMargin has unexpected type %T", x)
	}
	return nil
}

func _Wrapper_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Wrapper)
	switch tag {
	case 2: // time_margin.seconds
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TimeMargin = &Wrapper_Seconds{uint32(x)}
		return true, err
	case 3: // time_margin.minutes
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TimeMargin = &Wrapper_Minutes{uint32(x)}
		return true, err
	case 4: // time_margin.hours
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TimeMargin = &Wrapper_Hours{uint32(x)}
		return true, err
	case 5: // size_margin.megabytes
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SizeMargin = &Wrapper_Megabytes{uint32(x)}
		return true, err
	case 6: // size_margin.gigabytes
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SizeMargin = &Wrapper_Gigabytes{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Wrapper_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Wrapper)
	// time_margin
	switch x := m.TimeMargin.(type) {
	case *Wrapper_Seconds:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Seconds))
	case *Wrapper_Minutes:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Minutes))
	case *Wrapper_Hours:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Hours))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// size_margin
	switch x := m.SizeMargin.(type) {
	case *Wrapper_Megabytes:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Megabytes))
	case *Wrapper_Gigabytes:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Gigabytes))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ApolloPdu)(nil), "ApolloPdu")
	proto.RegisterType((*AuthExchange)(nil), "AuthExchange")
	proto.RegisterType((*BatchWrite)(nil), "BatchWrite")
	proto.RegisterType((*CloseTable)(nil), "CloseTable")
	proto.RegisterType((*CreateTable)(nil), "CreateTable")
	proto.RegisterType((*Delete)(nil), "Delete")
	proto.RegisterType((*DeleteTable)(nil), "DeleteTable")
	proto.RegisterType((*Error)(nil), "Error")
	proto.RegisterType((*OpenTable)(nil), "OpenTable")
	proto.RegisterType((*Read)(nil), "Read")
	proto.RegisterType((*ReadRange)(nil), "ReadRange")
	proto.RegisterType((*ReadRangeN)(nil), "ReadRangeN")
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterType((*TableInfo)(nil), "TableInfo")
	proto.RegisterType((*Update)(nil), "Update")
	proto.RegisterType((*Write)(nil), "Write")
	proto.RegisterType((*First)(nil), "First")
	proto.RegisterType((*Last)(nil), "Last")
	proto.RegisterType((*Seek)(nil), "Seek")
	proto.RegisterType((*Next)(nil), "Next")
	proto.RegisterType((*Prev)(nil), "Prev")
	proto.RegisterType((*AddIndex)(nil), "AddIndex")
	proto.RegisterType((*RemoveIndex)(nil), "RemoveIndex")
	proto.RegisterType((*IndexRead)(nil), "IndexRead")
	proto.RegisterType((*Continuation)(nil), "Continuation")
	proto.RegisterType((*Field)(nil), "Field")
	proto.RegisterType((*FieldNames)(nil), "FieldNames")
	proto.RegisterType((*Fields)(nil), "Fields")
	proto.RegisterType((*KeyColumnsPair)(nil), "KeyColumnsPair")
	proto.RegisterType((*KeyColumnsList)(nil), "KeyColumnsList")
	proto.RegisterType((*KcpIt)(nil), "KcpIt")
	proto.RegisterType((*TableOption)(nil), "TableOption")
	proto.RegisterType((*Tda)(nil), "Tda")
	proto.RegisterType((*UpdateInstruction)(nil), "UpdateInstruction")
	proto.RegisterType((*UpdateOperation)(nil), "UpdateOperation")
	proto.RegisterType((*Value)(nil), "Value")
	proto.RegisterType((*Version)(nil), "Version")
	proto.RegisterType((*Wrapper)(nil), "Wrapper")
	proto.RegisterEnum("Comparator", Comparator_name, Comparator_value)
	proto.RegisterEnum("DataModel", DataModel_name, DataModel_value)
	proto.RegisterEnum("HashingMethod", HashingMethod_name, HashingMethod_value)
	proto.RegisterEnum("TimeUnit", TimeUnit_name, TimeUnit_value)
	proto.RegisterEnum("Type", Type_name, Type_value)
	proto.RegisterEnum("UpdateInstruction_Instruction", UpdateInstruction_Instruction_name, UpdateInstruction_Instruction_value)
}

func init() { proto.RegisterFile("apollo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x58, 0xdb, 0x6e, 0x1b, 0xc9,
	0xd1, 0xe6, 0xf0, 0x3c, 0xc5, 0x83, 0xa9, 0xfe, 0xbd, 0xfb, 0x4f, 0x76, 0x1d, 0xd9, 0x3b, 0x5e,
	0xc7, 0x86, 0x9c, 0x9d, 0xc5, 0x3a, 0x08, 0x82, 0x20, 0x17, 0x09, 0x25, 0xd1, 0x11, 0x23, 0x89,
	0x12, 0x5a, 0xb2, 0x8c, 0xe4, 0x22, 0x83, 0x11, 0xa7, 0x25, 0x4e, 0x38, 0xa7, 0xcc, 0x34, 0xb5,
	0x66, 0x2e, 0xf6, 0x2a, 0xc8, 0x93, 0xe4, 0x15, 0x02, 0xe4, 0x66, 0x9f, 0x20, 0x40, 0xde, 0x20,
	0x8f, 0x91, 0xfb, 0xa0, 0xaa, 0x7b, 0x86, 0x94, 0x64, 0xad, 0x16, 0x46, 0x80, 0xdc, 0xf1, 0xfb,
	0xaa, 0xba, 0xa7, 0xbb, 0xba, 0xea, 0xab, 0x6e, 0x42, 0xd7, 0x4b, 0x93, 0x30, 0x4c, 0x9c, 0x34,
	0x4b, 0x64, 0x62, 0xff, 0xa3, 0x05, 0xe6, 0x90, 0x88, 0x63, 0x7f, 0xc1, 0x6c, 0x68, 0x5d, 0x89,
	0x2c, 0x0f, 0x92, 0xd8, 0x32, 0x9e, 0x18, 0x2f, 0x3a, 0xaf, 0xda, 0xce, 0x99, 0xc2, 0xbc, 0x30,
	0xb0, 0x67, 0xd0, 0x97, 0x99, 0x17, 0xe7, 0xde, 0x54, 0x06, 0x49, 0xec, 0x06, 0xbe, 0x55, 0x7d,
	0x62, 0xbc, 0xe8, 0xf1, 0xde, 0x1a, 0x3b, 0xf6, 0xd9, 0x26, 0x34, 0x44, 0x96, 0x25, 0x99, 0x55,
	0xa3, 0x89, 0x9a, 0xce, 0x08, 0xd1, 0x5e, 0x85, 0x2b, 0x9a, 0x3d, 0x87, 0x76, 0x26, 0xf2, 0x34,
	0x89, 0x73, 0x61, 0xd5, 0xc9, 0xc5, 0x74, 0xb8, 0x26, 0xf6, 0x2a, 0xbc, 0x34, 0xb2, 0xaf, 0xa0,
	0x3b, 0xcd, 0x84, 0x27, 0x85, 0x2b, 0xbd, 0xf3, 0x50, 0x58, 0x0d, 0x72, 0xee, 0x3a, 0x3b, 0x44,
	0x9e, 0x22, 0xb7, 0x57, 0xe1, 0x9d, 0xe9, 0x0a, 0xe2, 0x10, 0x5f, 0x84, 0xa2, 0x1c, 0xd2, 0xd4,
	0x43, 0x76, 0x89, 0x2c, 0x87, 0xf8, 0x2b, 0xc8, 0x5e, 0x02, 0x24, 0xa9, 0x88, 0xf5, 0x80, 0x16,
	0x0d, 0x00, 0xe7, 0x28, 0x15, 0x71, 0xe1, 0x6e, 0x26, 0x05, 0x60, 0x0e, 0x74, 0xa6, 0x61, 0x92,
	0x17, 0xd3, 0xb7, 0xc9, 0xbb, 0xe3, 0xec, 0x20, 0x57, 0xb8, 0xc3, 0xb4, 0x44, 0x38, 0x39, 0x79,
	0xba, 0x41, 0x7c, 0x91, 0x58, 0xa6, 0x9e, 0x9c, 0x6c, 0xe3, 0xf8, 0x22, 0xc1, 0xc9, 0x65, 0x01,
	0xd8, 0xa7, 0x50, 0xcf, 0x84, 0xe7, 0x5b, 0x40, 0x6e, 0x0d, 0x87, 0x0b, 0xcf, 0xdf, 0xab, 0x70,
	0x22, 0x31, 0xaa, 0x5f, 0x67, 0x81, 0x14, 0x56, 0x47, 0x47, 0xf5, 0x2d, 0x22, 0x8c, 0x2a, 0xd1,
	0xec, 0x33, 0x68, 0x2e, 0x52, 0xdf, 0x93, 0xc2, 0xea, 0x92, 0x43, 0xcb, 0x79, 0x43, 0x70, 0xaf,
	0xc2, 0xb5, 0x01, 0x5d, 0xd4, 0xc6, 0xad, 0x9e, 0x76, 0x51, 0x61, 0x41, 0x17, 0x65, 0xc0, 0xf5,
	0xe2, 0xd7, 0xdc, 0xcc, 0x8b, 0x2f, 0x85, 0xd5, 0xd7, 0xeb, 0xc5, 0x85, 0x70, 0x64, 0x70, 0xbd,
	0x59, 0x01, 0xd8, 0x97, 0xd0, 0x5d, 0x39, 0xbb, 0xb1, 0xf5, 0x40, 0x47, 0xa3, 0x74, 0x9f, 0x60,
	0x34, 0x4a, 0xff, 0x09, 0x46, 0xef, 0xdc, 0x93, 0xd3, 0x99, 0xab, 0x76, 0x32, 0xd0, 0xfe, 0xdb,
	0xc8, 0x15, 0xdb, 0x81, 0xf3, 0x12, 0xe1, 0x9e, 0x2f, 0x82, 0x2c, 0x97, 0xd6, 0x86, 0xde, 0xf3,
	0x6b, 0x44, 0xb8, 0x67, 0xa2, 0x31, 0x60, 0xa1, 0x97, 0x4b, 0x8b, 0xe9, 0x80, 0x1d, 0x78, 0x64,
	0x25, 0x12, 0x8d, 0xb9, 0x10, 0x73, 0xeb, 0xff, 0xb4, 0xf1, 0x44, 0x88, 0x39, 0x1a, 0x91, 0x44,
	0x63, 0x2c, 0xde, 0x49, 0xeb, 0xa1, 0x36, 0x4e, 0xc4, 0x3b, 0x1a, 0x89, 0x24, 0x1a, 0xd3, 0x4c,
	0x5c, 0x59, 0x1f, 0x69, 0xe3, 0x71, 0x26, 0xae, 0xd0, 0x88, 0x24, 0x7b, 0x01, 0xa6, 0xe7, 0xfb,
	0x6e, 0x10, 0xfb, 0xe2, 0x9d, 0xf5, 0xb1, 0x4e, 0xdf, 0xa1, 0xef, 0x8f, 0x91, 0xc0, 0xf4, 0xf5,
	0xf4, 0x6f, 0xcc, 0xc5, 0x4c, 0x44, 0xc9, 0x95, 0xd0, 0xce, 0xff, 0xaf, 0x73, 0x91, 0x13, 0x59,
	0xf8, 0x77, 0xb2, 0x15, 0xc4, 0xf0, 0x93, 0xaf, 0x4b, 0x79, 0x60, 0xe9, 0xf0, 0x93, 0x4d, 0x27,
	0x83, 0x19, 0x14, 0x60, 0xbb, 0x03, 0x66, 0x9a, 0x25, 0x53, 0xe1, 0x2f, 0x32, 0x61, 0xbf, 0x80,
	0xee, 0x70, 0x21, 0x67, 0xa3, 0x77, 0xd3, 0x19, 0x9d, 0x8d, 0x05, 0xad, 0xd4, 0x5b, 0x86, 0x89,
	0xe7, 0x53, 0x3d, 0x77, 0x79, 0x01, 0xed, 0x3f, 0x1b, 0x00, 0xab, 0x88, 0xb3, 0x1f, 0x16, 0x19,
	0x1a, 0x7b, 0x91, 0x20, 0x5f, 0x53, 0xe7, 0xe4, 0xc4, 0x8b, 0x04, 0x7b, 0x0e, 0xba, 0x58, 0xdc,
	0xb9, 0x58, 0xe6, 0x56, 0xf5, 0x49, 0x4d, 0x1f, 0x84, 0x08, 0x7d, 0x0e, 0xca, 0xb4, 0x2f, 0x96,
	0x39, 0x73, 0x00, 0xe8, 0x54, 0xdd, 0xf9, 0x55, 0x9a, 0x5b, 0x35, 0xf2, 0x7b, 0xe0, 0xec, 0x8b,
	0xe5, 0x4e, 0x12, 0x2e, 0xa2, 0x38, 0x3f, 0xf6, 0x82, 0x8c, 0x9b, 0xe4, 0xb2, 0x7f, 0x95, 0xe6,
	0xf6, 0x4b, 0x80, 0x55, 0xd5, 0xdc, 0xb3, 0x0a, 0x3b, 0x87, 0xce, 0x5a, 0xd1, 0xdf, 0xb7, 0x66,
	0x06, 0xf5, 0x72, 0xb1, 0x26, 0xa7, 0xdf, 0xec, 0x2b, 0xe8, 0xa9, 0x21, 0x49, 0x8a, 0x32, 0x55,
	0xac, 0xb0, 0xab, 0x6a, 0xf1, 0x88, 0x48, 0xde, 0x95, 0x2b, 0x90, 0xdb, 0x43, 0x68, 0xaa, 0xfa,
	0xb8, 0xef, 0x7b, 0x16, 0xd4, 0xe6, 0x62, 0x79, 0x23, 0x36, 0x48, 0xd9, 0x3f, 0x86, 0xce, 0x9a,
	0xf2, 0xdc, 0xb7, 0xcb, 0x6f, 0xa0, 0x41, 0x52, 0xc9, 0x36, 0xc1, 0x24, 0x49, 0x4d, 0x93, 0x4c,
	0x2a, 0x37, 0x12, 0x8a, 0x82, 0x62, 0x8f, 0xa0, 0x4d, 0x1a, 0x3e, 0x4d, 0x42, 0x92, 0x60, 0x34,
	0x97, 0x0c, 0xb3, 0xa0, 0x99, 0x2f, 0x73, 0x29, 0x22, 0x12, 0x60, 0xb4, 0x69, 0xcc, 0x1e, 0x42,
	0x3d, 0x0a, 0xf2, 0x29, 0xa9, 0x2e, 0xf2, 0x84, 0xb6, 0x5b, 0xd0, 0x98, 0x7a, 0x8b, 0x5c, 0xd8,
	0x5b, 0x60, 0x96, 0xb2, 0x77, 0xdf, 0x5a, 0x7f, 0x09, 0x75, 0x4c, 0xc2, 0x0f, 0x0f, 0xcd, 0x5f,
	0x0c, 0x30, 0x4b, 0xa1, 0xb8, 0x6f, 0x9a, 0xa7, 0x60, 0xe6, 0xd2, 0xcb, 0xa4, 0x7b, 0x7b, 0xb2,
	0x36, 0x19, 0xf6, 0xc5, 0x92, 0x3d, 0x86, 0x96, 0x88, 0x7d, 0x72, 0xa9, 0x5d, 0x73, 0x69, 0x8a,
	0xd8, 0x47, 0x87, 0x87, 0xd0, 0x08, 0x83, 0x28, 0x90, 0xb4, 0xff, 0x1e, 0x57, 0xc0, 0xfe, 0x3d,
	0xc0, 0x4a, 0xb0, 0xfe, 0x2b, 0x0b, 0xe9, 0x82, 0x11, 0x53, 0xec, 0x7b, 0xdc, 0x88, 0xed, 0x6f,
	0xab, 0xd0, 0x2e, 0xda, 0x1b, 0x1b, 0x40, 0x35, 0x99, 0x97, 0x47, 0x5a, 0x4d, 0xe6, 0xec, 0x29,
	0xb4, 0xa6, 0xaa, 0x42, 0xe8, 0x28, 0x51, 0x95, 0x69, 0xbe, 0x7c, 0xaf, 0xc2, 0x0b, 0x0b, 0xfb,
	0x05, 0x0c, 0xe6, 0x62, 0xe9, 0x6a, 0xe8, 0xa6, 0x5e, 0x50, 0x74, 0xd7, 0x9b, 0x25, 0xb6, 0x57,
	0xe1, 0xfd, 0xf9, 0x35, 0xe6, 0xe6, 0xe0, 0x30, 0xc8, 0xa5, 0xee, 0xbb, 0xeb, 0x83, 0x0f, 0x02,
	0xd2, 0xce, 0xb5, 0xc1, 0xc8, 0xb0, 0x67, 0x94, 0x6a, 0x29, 0x0d, 0x6a, 0xdc, 0x5c, 0x5f, 0x69,
	0x62, 0x8f, 0xa1, 0x39, 0x9f, 0xa6, 0x6e, 0x20, 0x75, 0xc7, 0x6d, 0x3a, 0xfb, 0xd3, 0x74, 0x4c,
	0x52, 0x3d, 0xc7, 0x1f, 0xcc, 0x81, 0x87, 0x51, 0x92, 0x09, 0xd7, 0xf7, 0xa4, 0xe7, 0xca, 0xc4,
	0x3d, 0x17, 0x6e, 0x2e, 0x62, 0x49, 0xfd, 0xb6, 0xcd, 0x07, 0x68, 0xdb, 0xf5, 0xa4, 0x77, 0x9a,
	0x6c, 0x8b, 0x13, 0x11, 0xcb, 0xed, 0x36, 0x34, 0x33, 0x91, 0x2f, 0x42, 0x69, 0xff, 0x06, 0xcc,
	0xb2, 0x5f, 0xde, 0x77, 0x3c, 0x9b, 0x00, 0x9e, 0x94, 0x59, 0x70, 0xbe, 0x90, 0xa2, 0xa8, 0xff,
	0x35, 0xc6, 0xfe, 0x06, 0x9a, 0xaa, 0x2b, 0x7e, 0x70, 0xde, 0x62, 0x34, 0x55, 0x3b, 0x75, 0x93,
	0x54, 0x64, 0x1e, 0x4a, 0x85, 0x4e, 0xb7, 0x81, 0xee, 0xb8, 0x47, 0x05, 0xcf, 0x1f, 0x2c, 0xae,
	0x13, 0xf6, 0x39, 0x34, 0xbe, 0x97, 0xea, 0xde, 0xfd, 0xf9, 0x27, 0xab, 0x74, 0xb9, 0x9e, 0xe4,
	0x05, 0x6d, 0xff, 0x08, 0x1a, 0xd4, 0x26, 0xef, 0xab, 0xe0, 0x67, 0x50, 0xc7, 0x7e, 0xf9, 0x3d,
	0x0a, 0x1d, 0x3b, 0xe7, 0x87, 0x17, 0xfa, 0xc7, 0x50, 0xc7, 0xee, 0xca, 0xfa, 0x50, 0x0d, 0xa4,
	0x6e, 0x46, 0xd5, 0x40, 0x22, 0x8f, 0x8d, 0xf5, 0x16, 0xbf, 0x03, 0xed, 0xa2, 0x9d, 0xde, 0xff,
	0xd1, 0xb5, 0xda, 0xc1, 0xb3, 0x2e, 0x83, 0xf0, 0x1a, 0x3a, 0x6b, 0x6d, 0xf6, 0xc3, 0xe7, 0x71,
	0xc1, 0x2c, 0xbb, 0xef, 0x7d, 0xb3, 0x3c, 0x86, 0x8e, 0x1a, 0xa6, 0xec, 0x24, 0xcc, 0x1c, 0x14,
	0x55, 0xf4, 0x25, 0x29, 0x32, 0x2d, 0xcb, 0x9c, 0x7e, 0xdb, 0xbb, 0xd0, 0xdd, 0x49, 0x62, 0x19,
	0xc4, 0x0b, 0xca, 0x10, 0xf6, 0x09, 0xb4, 0xa7, 0x49, 0x94, 0xd2, 0x2d, 0xcd, 0xa0, 0xda, 0x28,
	0xf1, 0x77, 0xc4, 0xf8, 0xef, 0x06, 0x1e, 0xba, 0x08, 0x7d, 0xfc, 0xc6, 0xda, 0xea, 0xe8, 0x37,
	0xfb, 0x04, 0x5a, 0xe7, 0x49, 0x12, 0x0a, 0x2f, 0xa6, 0x45, 0xb5, 0x51, 0x59, 0x34, 0xc1, 0x18,
	0xd4, 0x82, 0x58, 0xd2, 0x92, 0x6a, 0x7b, 0x15, 0x8e, 0x00, 0x1b, 0xc8, 0x79, 0x10, 0x7b, 0xd9,
	0x92, 0x64, 0xa2, 0x8b, 0x0d, 0x44, 0x61, 0x6c, 0x20, 0xf1, 0x22, 0x0c, 0x49, 0x09, 0xba, 0x74,
	0x5f, 0x5a, 0x84, 0xd4, 0x70, 0xfc, 0x64, 0x51, 0x5c, 0xb7, 0x0d, 0xba, 0x4e, 0x12, 0xa6, 0x56,
	0x24, 0xb3, 0x20, 0xbe, 0xa4, 0x3a, 0x57, 0xad, 0x88, 0x30, 0x36, 0x9d, 0x2b, 0x2f, 0x5c, 0x08,
	0xfb, 0x0b, 0x00, 0x5a, 0x39, 0x46, 0x28, 0xc7, 0x18, 0x5e, 0x20, 0xa2, 0x10, 0xe6, 0x96, 0xa1,
	0x2a, 0xf8, 0xa2, 0x74, 0xb0, 0x5f, 0x40, 0x53, 0xc9, 0x0f, 0xdb, 0x84, 0x26, 0xf1, 0xca, 0x6b,
	0x4d, 0xed, 0x15, 0x6b, 0x1f, 0x40, 0xff, 0xba, 0x34, 0x16, 0xf1, 0x33, 0xbe, 0xb3, 0xaa, 0xaa,
	0xef, 0xaf, 0xaa, 0xd9, 0xfa, 0x6c, 0xa4, 0x8c, 0x4f, 0xa1, 0x4e, 0xaa, 0x68, 0xbc, 0xff, 0xaa,
	0x43, 0x46, 0x7a, 0xc2, 0xac, 0x1d, 0xaf, 0x96, 0xf8, 0x9e, 0xb3, 0x7e, 0xe6, 0xfc, 0x9a, 0x8b,
	0xcd, 0xa1, 0x41, 0xda, 0xc9, 0x7e, 0xfe, 0x1e, 0xd1, 0x37, 0xde, 0x2b, 0xfa, 0xb7, 0x24, 0x5f,
	0xd5, 0x54, 0xb5, 0xac, 0xa9, 0x7f, 0xd7, 0xa0, 0xb3, 0x76, 0xd1, 0xc1, 0x1b, 0xae, 0x5c, 0xa6,
	0x2a, 0x4b, 0xfa, 0xaf, 0x1a, 0xce, 0xe9, 0x32, 0xc5, 0xbb, 0x37, 0x91, 0x78, 0x09, 0x25, 0x95,
	0x8e, 0x12, 0x5f, 0xa8, 0xfb, 0x45, 0xff, 0x15, 0x38, 0xa8, 0xce, 0x87, 0xc8, 0xe0, 0x55, 0xc4,
	0x2f, 0x00, 0xfb, 0x1c, 0x5a, 0x5f, 0x67, 0x5e, 0x9a, 0x8a, 0xa2, 0x21, 0xb5, 0x9d, 0xb7, 0x0a,
	0x63, 0x96, 0x69, 0x13, 0x7b, 0x09, 0x9d, 0x48, 0x44, 0x6e, 0xe1, 0x59, 0xbf, 0xe5, 0x09, 0x91,
	0x88, 0x34, 0xc2, 0x63, 0x92, 0xbe, 0xa7, 0xbb, 0x4d, 0xdd, 0x39, 0xf5, 0x3d, 0x4c, 0x4c, 0xe9,
	0x7b, 0xec, 0x0b, 0x00, 0x2c, 0x06, 0x2f, 0xf3, 0x64, 0x92, 0x51, 0xb2, 0xf5, 0xf1, 0xf1, 0x55,
	0x52, 0xf4, 0xf8, 0x2a, 0x11, 0xfb, 0x0c, 0x3a, 0x32, 0x88, 0xb0, 0xd1, 0x64, 0x81, 0xc8, 0x55,
	0xab, 0x41, 0x17, 0x24, 0x4f, 0x88, 0xa3, 0x04, 0x9d, 0x79, 0x99, 0x9f, 0xd3, 0x53, 0xae, 0x47,
	0x09, 0x4a, 0x98, 0xd9, 0xd0, 0xf1, 0x83, 0x5c, 0x77, 0x0e, 0x9f, 0x9e, 0x6e, 0x6d, 0x7a, 0x3a,
	0xae, 0x48, 0xf6, 0x25, 0xb0, 0x4c, 0xa4, 0x61, 0x30, 0xa5, 0x93, 0x73, 0x2f, 0xbc, 0x29, 0xae,
	0x0b, 0xf4, 0x4c, 0x1b, 0x6b, 0xb6, 0xd7, 0x64, 0xc2, 0x07, 0xd0, 0xcc, 0xcb, 0x67, 0xae, 0x78,
	0x17, 0x2e, 0xfc, 0xe2, 0x29, 0xd7, 0x71, 0x56, 0x05, 0x80, 0xcb, 0x43, 0x8f, 0x11, 0x39, 0xb0,
	0x9f, 0x41, 0x1f, 0x51, 0x10, 0x5f, 0xba, 0x91, 0x90, 0xb3, 0xc4, 0xa7, 0xc7, 0x5d, 0xff, 0x55,
	0xdf, 0xd9, 0x53, 0xf4, 0x21, 0xb1, 0x7b, 0x15, 0xde, 0x9b, 0xad, 0x13, 0xdb, 0x0d, 0xa8, 0x25,
	0xa9, 0xb4, 0xff, 0x69, 0x40, 0xed, 0xd4, 0xf7, 0xd8, 0xe7, 0xd0, 0x8f, 0x17, 0x91, 0x9b, 0x5c,
	0xb8, 0xe7, 0x8b, 0xe9, 0x5c, 0xc8, 0x9c, 0x4e, 0xbe, 0xc7, 0xbb, 0xf1, 0x22, 0x3a, 0xba, 0xd8,
	0x56, 0x1c, 0xea, 0x44, 0x2e, 0xa6, 0x49, 0xec, 0xab, 0xab, 0x08, 0xee, 0xa1, 0x20, 0xd0, 0x16,
	0x05, 0x31, 0xb5, 0xd5, 0x5a, 0x61, 0xd3, 0x04, 0xfb, 0x18, 0x1a, 0xb3, 0x64, 0x91, 0xe5, 0xea,
	0x5e, 0x85, 0x3d, 0x9f, 0x20, 0xfb, 0x01, 0xb4, 0x65, 0xee, 0x52, 0x39, 0xd2, 0x69, 0x9a, 0xbc,
	0x25, 0x73, 0x25, 0x53, 0xcf, 0xf1, 0xed, 0x22, 0xa6, 0x01, 0xfd, 0xe1, 0xa0, 0x0e, 0xd2, 0x74,
	0x4e, 0x83, 0x48, 0xbc, 0x89, 0x03, 0xc9, 0x57, 0xb6, 0xed, 0x9e, 0x3e, 0xc3, 0xc8, 0xcb, 0x2e,
	0x83, 0xd8, 0xfe, 0xd6, 0x80, 0x0d, 0xd5, 0x65, 0xc7, 0x71, 0x2e, 0xb3, 0x05, 0xfd, 0xe7, 0xc0,
	0x7e, 0x05, 0x9d, 0x60, 0x05, 0xe9, 0x28, 0xfb, 0xaf, 0x36, 0x9d, 0x5b, 0x8e, 0xce, 0xda, 0x6f,
	0xbe, 0x3e, 0x84, 0x3d, 0x02, 0x53, 0xce, 0x32, 0x91, 0xcf, 0x92, 0xd0, 0xa7, 0x67, 0x6f, 0x97,
	0xaf, 0x08, 0xf6, 0x29, 0x98, 0xb9, 0x90, 0x2e, 0x09, 0x16, 0xbd, 0x72, 0xbb, 0xbc, 0x9d, 0x0b,
	0x79, 0x46, 0x02, 0xf6, 0x12, 0x3a, 0xeb, 0x6b, 0xe9, 0x81, 0x39, 0x9e, 0xec, 0xf0, 0xd1, 0xe1,
	0x68, 0x72, 0x3a, 0xa8, 0x20, 0x3c, 0x3a, 0x1b, 0xf1, 0xb7, 0x7c, 0x7c, 0x3a, 0x1a, 0xb4, 0xec,
	0xbf, 0x19, 0xf0, 0xe0, 0xc6, 0x2d, 0x01, 0xaf, 0xa5, 0x2a, 0x46, 0x4a, 0xb3, 0x15, 0x60, 0x43,
	0x60, 0xfa, 0x9e, 0xb1, 0xbe, 0x35, 0xa5, 0x1f, 0xec, 0xf6, 0xd6, 0xf8, 0xc6, 0xe2, 0x56, 0x58,
	0x1e, 0x69, 0x8d, 0x2d, 0xff, 0x88, 0xa1, 0x05, 0x73, 0x45, 0xb2, 0x97, 0xd0, 0xf3, 0xc5, 0x85,
	0xb7, 0x08, 0x8b, 0x8d, 0xd5, 0xaf, 0x79, 0x75, 0xb5, 0x51, 0x6d, 0xf2, 0xaf, 0x06, 0x34, 0xe8,
	0xd7, 0x7a, 0x33, 0x31, 0xee, 0x68, 0x26, 0xd5, 0xf7, 0x37, 0x93, 0xda, 0x1d, 0xcd, 0xa4, 0x7e,
	0x47, 0x33, 0x69, 0xdc, 0xd9, 0x4c, 0x9a, 0x77, 0x35, 0x93, 0x9f, 0x42, 0x4b, 0xff, 0x6b, 0x85,
	0x51, 0x8d, 0xbc, 0x3f, 0x24, 0x99, 0xce, 0x74, 0x05, 0x88, 0x0d, 0xe2, 0x24, 0xd3, 0xff, 0x5c,
	0x29, 0x60, 0xff, 0xcb, 0x80, 0x56, 0xa1, 0x3e, 0xff, 0x9b, 0x52, 0xd9, 0x04, 0x33, 0x12, 0x97,
	0xde, 0xf9, 0x12, 0x47, 0x35, 0xc8, 0x66, 0xf0, 0x15, 0x85, 0xf6, 0xcb, 0xa0, 0xb0, 0x37, 0x0b,
	0x7b, 0x49, 0xdd, 0x28, 0x13, 0x84, 0x79, 0xf0, 0xa7, 0x02, 0x6e, 0xe1, 0x5b, 0x7b, 0x25, 0x8b,
	0x7d, 0x80, 0xdd, 0xd1, 0xc9, 0xce, 0x68, 0xb2, 0x3b, 0x9e, 0xfc, 0x5a, 0xa5, 0xe8, 0xb0, 0x84,
	0xc6, 0xd6, 0x73, 0x30, 0x4b, 0xad, 0x67, 0x4d, 0xa8, 0xee, 0x9f, 0x0d, 0x2a, 0xcc, 0x84, 0xc6,
	0x90, 0xf3, 0xe1, 0x6f, 0x07, 0x06, 0x6b, 0x41, 0xed, 0x70, 0x78, 0x3c, 0xa8, 0x6e, 0x4d, 0xa0,
	0x77, 0x4d, 0x85, 0xd8, 0x00, 0xba, 0x67, 0x63, 0x7e, 0xfa, 0x66, 0x78, 0x30, 0x39, 0xda, 0x1d,
	0x9d, 0x0c, 0x2a, 0xf8, 0xa9, 0x9d, 0xa3, 0xc9, 0xc9, 0xf8, 0xe4, 0x14, 0xab, 0xc1, 0x60, 0x1d,
	0x68, 0xbd, 0x99, 0x8c, 0x5f, 0x1f, 0xf1, 0xc3, 0x41, 0x15, 0x8d, 0x7c, 0x34, 0xd9, 0x1d, 0xfd,
	0xee, 0xec, 0xe8, 0xcd, 0xc9, 0xa0, 0xb6, 0xb5, 0x07, 0xed, 0x42, 0x01, 0x18, 0x40, 0xf3, 0x64,
	0xb4, 0x73, 0x34, 0xd9, 0x1d, 0x54, 0xd8, 0x03, 0xe8, 0x1c, 0x8e, 0x0f, 0x0e, 0xc6, 0x9a, 0x30,
	0x14, 0xb1, 0xc3, 0x8f, 0x34, 0x41, 0x33, 0x4d, 0x86, 0x93, 0x02, 0xd7, 0xb6, 0xfe, 0x08, 0x75,
	0xec, 0x68, 0xf8, 0xb9, 0x83, 0xd1, 0xd9, 0xe8, 0x60, 0x77, 0x5b, 0xad, 0xe5, 0x70, 0x74, 0x58,
	0x60, 0x83, 0x31, 0xe8, 0x6b, 0xf0, 0x96, 0x0f, 0x8f, 0x8f, 0x47, 0x38, 0xd1, 0x47, 0xb0, 0xb1,
	0xf2, 0x29, 0xe8, 0x1a, 0x0e, 0xd5, 0xdc, 0xe9, 0xee, 0x70, 0x50, 0x67, 0x1b, 0xd0, 0x5b, 0xb9,
	0x21, 0xd5, 0x38, 0x6f, 0xd2, 0xf3, 0xfb, 0x27, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x1d,
	0xbf, 0x4d, 0x64, 0x15, 0x00, 0x00,
}
